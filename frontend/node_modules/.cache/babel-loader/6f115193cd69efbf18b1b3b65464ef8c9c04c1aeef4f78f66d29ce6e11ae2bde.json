{"ast":null,"code":"import _objectSpread from\"/home/ichigomazone/Vscode/ReactJs/new-ui/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import { useCallback } from \"react\";\n// import axios from \"axios\";\n// const useChatActions = (friend, onUpdateChat, setMessages, socketRef) => {\n//   const handleSend = useCallback(\n//     async (messageText = \"\") => {\n//       if (!friend || !friend.id || !friend.sender) return;\n//       if (messageText.trim()) {\n//         const newMessage = {\n//           id: Date.now(),\n//           text: messageText.trim(),\n//           type: \"sent\",\n//           timestamp: new Date(),\n//           isTemporary: false,\n//         };\n//         setMessages((prev) => [...prev, newMessage]);\n//         if (socketRef.current) {\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: newMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               content: newMessage.text,\n//               message_type: \"text\",\n//               timestamp: newMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: newMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: newMessage.text,\n//               message_type: \"text\",\n//               timestamp: newMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n//         }\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: newMessage.id,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: messageText.trim(),\n//             message_type: \"text\",\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//           });\n//         } catch (error) {\n//           console.error(\"Lỗi gửi tin nhắn:\", error);\n//         }\n//       } else {\n//         const likeMessage = {\n//           id: Date.now(),\n//           text: \"👍\",\n//           type: \"sent\",\n//           timestamp: new Date(),\n//           isTemporary: false,\n//         };\n//         setMessages((prev) => [...prev, likeMessage]);\n//         if (socketRef.current) {\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: likeMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               content: \"👍\",\n//               message_type: \"text\",\n//               timestamp: likeMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: likeMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: \"👍\",\n//               message_type: \"text\",\n//               timestamp: likeMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n//         }\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: likeMessage.id,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: \"👍\",\n//             message_type: \"text\",\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//           });\n//         } catch (error) {\n//           console.error(\"Lỗi gửi tin nhắn like:\", error);\n//         }\n//       }\n//     },\n//     [friend, onUpdateChat, setMessages, socketRef]\n//   );\n//   const handleMediaSelect = useCallback(\n//     async (e, mediaType) => {\n//       if (!friend || !friend.id || !friend.sender) return;\n//       const file = e.target.files[0];\n//       if (!file) {\n//         alert(\"Vui lòng chọn một tệp.\");\n//         return;\n//       }\n//       if (file.size > 50 * 1024 * 1024) {\n//         alert(\"Tệp quá lớn. Kích thước tối đa là 50MB.\");\n//         return;\n//       }\n//       if (mediaType === \"image\" && !file.type.startsWith(\"image/\")) {\n//         alert(\"Vui lòng chọn tệp hình ảnh.\");\n//         return;\n//       }\n//       if (mediaType === \"video\" && !file.type.startsWith(\"video/\")) {\n//         alert(\"Vui lòng chọn tệp video.\");\n//         return;\n//       }\n//       const tempMessageId = Date.now() + Math.random();\n//       if (mediaType === \"file\") {\n//         await uploadFileDirectly(file, mediaType, tempMessageId);\n//       } else {\n//         const reader = new FileReader();\n//         reader.onload = () => {\n//           const tempMessage = {\n//             id: tempMessageId,\n//             type: \"sent\",\n//             timestamp: new Date(),\n//             uploading: true,\n//             fileName: file.name,\n//             isTemporary: true,\n//           };\n//           let base64Data = null;\n//           if (mediaType === \"image\") {\n//             tempMessage.temporaryImage = reader.result;\n//             base64Data = reader.result;\n//           } else if (mediaType === \"video\") {\n//             tempMessage.temporaryVideo = reader.result;\n//             base64Data = reader.result;\n//           }\n//           setMessages((prev) => [...prev, tempMessage]);\n//           if (socketRef.current) {\n//             socketRef.current.emit(\"sendMessage\", {\n//               toUserId: friend.member,\n//               message: {\n//                 id: tempMessageId,\n//                 conversation_id: friend.id,\n//                 sender: friend.sender,\n//                 recipient: friend.member,\n//                 content: file.name,\n//                 message_type: mediaType,\n//                 timestamp: new Date().toISOString(),\n//                 url: null,\n//                 base64Data: base64Data,\n//               },\n//             });\n//             socketRef.current.emit(\"sendMessage\", {\n//               toUserId: friend.sender,\n//               message: {\n//                 id: tempMessageId,\n//                 conversation_id: friend.id,\n//                 sender: friend.sender,\n//                 recipient: friend.sender,\n//                 content: file.name,\n//                 message_type: mediaType,\n//                 timestamp: new Date().toISOString(),\n//                 url: null,\n//                 base64Data: base64Data,\n//               },\n//             });\n//           }\n//           uploadFileToServer(file, mediaType, tempMessageId, base64Data);\n//         };\n//         reader.onerror = () => {\n//           alert(\"Lỗi khi đọc tệp.\");\n//         };\n//         reader.readAsDataURL(file);\n//       }\n//     },\n//     [friend, onUpdateChat, setMessages, socketRef]\n//   );\n//   const uploadFileDirectly = async (file, mediaType, messageId) => {\n//     if (!friend || !friend.id || !friend.sender) return;\n//     const formData = new FormData();\n//     formData.append(\"file\", file, encodeURIComponent(file.name));\n//     try {\n//       const uploadingMessage = {\n//         id: messageId,\n//         type: \"sent\",\n//         timestamp: new Date(),\n//         uploading: true,\n//         fileName: file.name,\n//         isTemporary: false,\n//       };\n//       setMessages((prev) => [...prev, uploadingMessage]);\n//       const uploadResponse = await axios.post(`http://localhost:5000/upload-file`, formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           \"Accept\": \"application/json\",\n//         },\n//       });\n//       if (uploadResponse.data.url) {\n//         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n//         const fullUrl = uploadResponse.data.url;\n//         const fileMessage = {\n//           id: messageId,\n//           type: \"sent\",\n//           timestamp: new Date(),\n//           uploading: false,\n//           fileName: file.name,\n//           file: {\n//             name: decodeURIComponent(file.name),\n//             url: fullUrl,\n//           },\n//           isTemporary: false,\n//         };\n//         setMessages((prev) =>\n//           prev.map((msg) => {\n//             if (msg.id === messageId) {\n//               return fileMessage;\n//             }\n//             return msg;\n//           })\n//         );\n//         if (socketRef.current) {\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               content: decodeURIComponent(file.name),\n//               message_type: mediaType,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: decodeURIComponent(file.name),\n//               message_type: mediaType,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n//         }\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: messageId,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: decodeURIComponent(file.name),\n//             message_type: mediaType,\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//             url: filePath,\n//           });\n//         } catch (messageError) {\n//           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n//         }\n//       }\n//     } catch (uploadError) {\n//       setMessages((prev) =>\n//         prev.map((msg) => {\n//           if (msg.id === messageId) {\n//             return {\n//               ...msg,\n//               uploading: false,\n//               error: true,\n//               isTemporary: false,\n//             };\n//           }\n//           return msg;\n//         })\n//       );\n//       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n//     }\n//   };\n//   const uploadFileToServer = async (file, mediaType, messageId, base64Data = null) => {\n//     if (!friend || !friend.id || !friend.sender) return;\n//     const formData = new FormData();\n//     let endpoint;\n//     if (mediaType === \"image\") {\n//       formData.append(\"file\", file, encodeURIComponent(file.name));\n//       endpoint = \"/upload-file\";\n//     } else if (mediaType === \"video\") {\n//       formData.append(\"video\", file, encodeURIComponent(file.name));\n//       endpoint = \"/upload-file\";\n//     }\n//     try {\n//       const uploadResponse = await axios.post(`http://localhost:5000${endpoint}`, formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           \"Accept\": \"application/json\",\n//         },\n//       });\n//       if (uploadResponse.data.url) {\n//         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n//         const fullUrl = uploadResponse.data.url;\n//         setMessages((prev) =>\n//           prev.map((msg) => {\n//             if (msg.id === messageId) {\n//               const updatedMsg = {\n//                 ...msg,\n//                 uploading: false,\n//                 isTemporary: false,\n//                 image: mediaType === \"image\" ? fullUrl : msg.image,\n//                 video: mediaType === \"video\" ? fullUrl : msg.video,\n//               };\n//               return updatedMsg;\n//             }\n//             return msg;\n//           })\n//         );\n//         if (socketRef.current) {\n//           // Gửi updateMessage tới người nhận\n//           socketRef.current.emit(\"updateMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               message_type: mediaType,\n//               content: decodeURIComponent(file.name),\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n//           // Gửi sendMessage tới chính người gửi\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: decodeURIComponent(file.name),\n//               message_type: mediaType,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n//         }\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: messageId,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: decodeURIComponent(file.name),\n//             message_type: mediaType,\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//             url: filePath,\n//           });\n//         } catch (messageError) {\n//           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n//         }\n//       }\n//     } catch (uploadError) {\n//       setMessages((prev) =>\n//         prev.map((msg) => {\n//           if (msg.id === messageId) {\n//             return {\n//               ...msg,\n//               uploading: false,\n//               error: true,\n//               isTemporary: false,\n//             };\n//           }\n//           return msg;\n//         })\n//       );\n//       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n//     }\n//   };\n//   return { handleSend, handleMediaSelect };\n// };\n// export default useChatActions;\nimport{useCallback}from\"react\";import axios from\"axios\";const useChatActions=(friend,onUpdateChat,setMessages,socketRef)=>{const handleSend=useCallback(async function(){let messageText=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";if(!friend||!friend.id||!friend.sender)return;if(messageText.trim()){const newMessage={id:Date.now(),text:messageText.trim(),type:\"sent\",timestamp:new Date(),isTemporary:false};setMessages(prev=>[...prev,newMessage]);if(socketRef.current){socketRef.current.emit(\"sendMessage\",{toUserId:friend.member,message:{id:newMessage.id,conversation_id:friend.id,sender:friend.sender,recipient:friend.member,content:newMessage.text,message_type:\"text\",timestamp:newMessage.timestamp.toISOString(),url:null}});socketRef.current.emit(\"sendMessage\",{toUserId:friend.sender,message:{id:newMessage.id,conversation_id:friend.id,sender:friend.sender,recipient:friend.sender,content:newMessage.text,message_type:\"text\",timestamp:newMessage.timestamp.toISOString(),url:null}});}try{await axios.post(\"http://localhost:5000/api/chat/send-message/\",{id:newMessage.id,conversationId:friend.id,sender:friend.sender,content:messageText.trim(),message_type:\"text\",timestamp:new Date().toISOString(),recipient:friend.member});}catch(error){console.error(\"Lỗi gửi tin nhắn:\",error);}}else{const likeMessage={id:Date.now(),text:\"👍\",type:\"sent\",timestamp:new Date(),isTemporary:false};setMessages(prev=>[...prev,likeMessage]);if(socketRef.current){socketRef.current.emit(\"sendMessage\",{toUserId:friend.member,message:{id:likeMessage.id,conversation_id:friend.id,sender:friend.sender,recipient:friend.member,content:\"👍\",message_type:\"text\",timestamp:likeMessage.timestamp.toISOString(),url:null}});socketRef.current.emit(\"sendMessage\",{toUserId:friend.sender,message:{id:likeMessage.id,conversation_id:friend.id,sender:friend.sender,recipient:friend.sender,content:\"👍\",message_type:\"text\",timestamp:likeMessage.timestamp.toISOString(),url:null}});}try{await axios.post(\"http://localhost:5000/api/chat/send-message/\",{id:likeMessage.id,conversationId:friend.id,sender:friend.sender,content:\"👍\",message_type:\"text\",timestamp:new Date().toISOString(),recipient:friend.member});}catch(error){console.error(\"Lỗi gửi tin nhắn like:\",error);}}},[friend,onUpdateChat,setMessages,socketRef]);const handleMediaSelect=useCallback(async(e,mediaType)=>{if(!friend||!friend.id||!friend.sender)return;const file=e.target.files[0];if(!file){alert(\"Vui lòng chọn một tệp.\");return;}if(file.size>50*1024*1024){alert(\"Tệp quá lớn. Kích thước tối đa là 50MB.\");return;}if(mediaType===\"image\"&&!file.type.startsWith(\"image/\")){alert(\"Vui lòng chọn tệp hình ảnh.\");return;}if(mediaType===\"video\"&&!file.type.startsWith(\"video/\")){alert(\"Vui lòng chọn tệp video.\");return;}const tempMessageId=Date.now()+Math.random();if(mediaType===\"file\"){await uploadFileDirectly(file,mediaType,tempMessageId);}else{const reader=new FileReader();reader.onload=()=>{const tempMessage={id:tempMessageId,type:\"sent\",timestamp:new Date(),uploading:true,fileName:file.name,isTemporary:true};let base64Data=null;if(mediaType===\"image\"){tempMessage.temporaryImage=reader.result;base64Data=reader.result;}else if(mediaType===\"video\"){tempMessage.temporaryVideo=reader.result;base64Data=reader.result;}setMessages(prev=>[...prev,tempMessage]);if(socketRef.current){socketRef.current.emit(\"sendMessage\",{toUserId:friend.member,message:{id:tempMessageId,conversation_id:friend.id,sender:friend.sender,recipient:friend.member,content:file.name,message_type:mediaType,timestamp:new Date().toISOString(),url:null,base64Data:base64Data}});socketRef.current.emit(\"sendMessage\",{toUserId:friend.sender,message:{id:tempMessageId,conversation_id:friend.id,sender:friend.sender,recipient:friend.sender,content:file.name,message_type:mediaType,timestamp:new Date().toISOString(),url:null,base64Data:base64Data}});}uploadFileToServer(file,mediaType,tempMessageId,base64Data);};reader.onerror=()=>{alert(\"Lỗi khi đọc tệp.\");};reader.readAsDataURL(file);}},[friend,onUpdateChat,setMessages,socketRef]);const uploadFileDirectly=async(file,mediaType,messageId)=>{if(!friend||!friend.id||!friend.sender)return;const formData=new FormData();formData.append(\"file\",file,encodeURIComponent(file.name));try{const uploadingMessage={id:messageId,type:\"sent\",timestamp:new Date(),uploading:true,fileName:file.name,isTemporary:false};setMessages(prev=>[...prev,uploadingMessage]);const uploadResponse=await axios.post(\"http://localhost:5000/upload-file\",formData,{headers:{\"Content-Type\":\"multipart/form-data\",\"Accept\":\"application/json\"}});if(uploadResponse.data.url){const filePath=uploadResponse.data.url.replace(\"http://localhost:5000\",\"\");const fullUrl=uploadResponse.data.url;const fileMessage={id:messageId,type:\"sent\",timestamp:new Date(),uploading:false,fileName:file.name,file:{name:decodeURIComponent(file.name),url:fullUrl},isTemporary:false};setMessages(prev=>prev.map(msg=>{if(msg.id===messageId){return fileMessage;}return msg;}));if(socketRef.current){socketRef.current.emit(\"sendMessage\",{toUserId:friend.member,message:{id:messageId,conversation_id:friend.id,sender:friend.sender,recipient:friend.member,content:decodeURIComponent(file.name),message_type:mediaType,timestamp:new Date().toISOString(),url:filePath}});socketRef.current.emit(\"sendMessage\",{toUserId:friend.sender,message:{id:messageId,conversation_id:friend.id,sender:friend.sender,recipient:friend.sender,content:decodeURIComponent(file.name),message_type:mediaType,timestamp:new Date().toISOString(),url:filePath}});}try{await axios.post(\"http://localhost:5000/api/chat/send-message/\",{id:messageId,conversationId:friend.id,sender:friend.sender,content:decodeURIComponent(file.name),message_type:mediaType,timestamp:new Date().toISOString(),recipient:friend.member,url:filePath});}catch(messageError){console.error(\"Lỗi gửi tin nhắn:\",messageError);}}}catch(uploadError){var _uploadError$response,_uploadError$response2;setMessages(prev=>prev.map(msg=>{if(msg.id===messageId){return _objectSpread(_objectSpread({},msg),{},{uploading:false,error:true,isTemporary:false});}return msg;}));alert(\"Upload thất bại: \"+(((_uploadError$response=uploadError.response)===null||_uploadError$response===void 0?void 0:(_uploadError$response2=_uploadError$response.data)===null||_uploadError$response2===void 0?void 0:_uploadError$response2.error)||uploadError.message));}};const uploadFileToServer=async function(file,mediaType,messageId){let base64Data=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(!friend||!friend.id||!friend.sender)return;const formData=new FormData();let endpoint;if(mediaType===\"image\"){formData.append(\"file\",file,encodeURIComponent(file.name));endpoint=\"/upload-file\";}else if(mediaType===\"video\"){// ✅ SỬA: Đổi \"video\" thành \"file\"\nformData.append(\"file\",file,encodeURIComponent(file.name));endpoint=\"/upload-file\";}try{const uploadResponse=await axios.post(\"http://localhost:5000\".concat(endpoint),formData,{headers:{\"Content-Type\":\"multipart/form-data\",\"Accept\":\"application/json\"}});if(uploadResponse.data.url){const filePath=uploadResponse.data.url.replace(\"http://localhost:5000\",\"\");const fullUrl=uploadResponse.data.url;setMessages(prev=>prev.map(msg=>{if(msg.id===messageId){const updatedMsg=_objectSpread(_objectSpread({},msg),{},{uploading:false,isTemporary:false,image:mediaType===\"image\"?fullUrl:msg.image,video:mediaType===\"video\"?fullUrl:msg.video});return updatedMsg;}return msg;}));if(socketRef.current){// Gửi updateMessage tới người nhận\nsocketRef.current.emit(\"updateMessage\",{toUserId:friend.member,message:{id:messageId,conversation_id:friend.id,message_type:mediaType,content:decodeURIComponent(file.name),sender:friend.sender,recipient:friend.member,timestamp:new Date().toISOString(),url:filePath}});// Gửi sendMessage tới chính người gửi\nsocketRef.current.emit(\"sendMessage\",{toUserId:friend.sender,message:{id:messageId,conversation_id:friend.id,sender:friend.sender,recipient:friend.sender,content:decodeURIComponent(file.name),message_type:mediaType,timestamp:new Date().toISOString(),url:filePath}});}try{await axios.post(\"http://localhost:5000/api/chat/send-message/\",{id:messageId,conversationId:friend.id,sender:friend.sender,content:decodeURIComponent(file.name),message_type:mediaType,timestamp:new Date().toISOString(),recipient:friend.member,url:filePath});}catch(messageError){console.error(\"Lỗi gửi tin nhắn:\",messageError);}}}catch(uploadError){var _uploadError$response3,_uploadError$response4;setMessages(prev=>prev.map(msg=>{if(msg.id===messageId){return _objectSpread(_objectSpread({},msg),{},{uploading:false,error:true,isTemporary:false});}return msg;}));alert(\"Upload thất bại: \"+(((_uploadError$response3=uploadError.response)===null||_uploadError$response3===void 0?void 0:(_uploadError$response4=_uploadError$response3.data)===null||_uploadError$response4===void 0?void 0:_uploadError$response4.error)||uploadError.message));}};return{handleSend,handleMediaSelect};};export default useChatActions;","map":{"version":3,"names":["useCallback","axios","useChatActions","friend","onUpdateChat","setMessages","socketRef","handleSend","messageText","arguments","length","undefined","id","sender","trim","newMessage","Date","now","text","type","timestamp","isTemporary","prev","current","emit","toUserId","member","message","conversation_id","recipient","content","message_type","toISOString","url","post","conversationId","error","console","likeMessage","handleMediaSelect","e","mediaType","file","target","files","alert","size","startsWith","tempMessageId","Math","random","uploadFileDirectly","reader","FileReader","onload","tempMessage","uploading","fileName","name","base64Data","temporaryImage","result","temporaryVideo","uploadFileToServer","onerror","readAsDataURL","messageId","formData","FormData","append","encodeURIComponent","uploadingMessage","uploadResponse","headers","data","filePath","replace","fullUrl","fileMessage","decodeURIComponent","map","msg","messageError","uploadError","_uploadError$response","_uploadError$response2","_objectSpread","response","endpoint","concat","updatedMsg","image","video","_uploadError$response3","_uploadError$response4"],"sources":["/home/ichigomazone/Vscode/ReactJs/new-ui/frontend/src/components/Chat/ChatAction/useChatActions.js"],"sourcesContent":["\n// import { useCallback } from \"react\";\n// import axios from \"axios\";\n\n// const useChatActions = (friend, onUpdateChat, setMessages, socketRef) => {\n\n//   const handleSend = useCallback(\n//     async (messageText = \"\") => {\n//       if (!friend || !friend.id || !friend.sender) return;\n\n//       if (messageText.trim()) {\n//         const newMessage = {\n//           id: Date.now(),\n//           text: messageText.trim(),\n//           type: \"sent\",\n//           timestamp: new Date(),\n//           isTemporary: false,\n//         };\n//         setMessages((prev) => [...prev, newMessage]);\n\n//         if (socketRef.current) {\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: newMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               content: newMessage.text,\n//               message_type: \"text\",\n//               timestamp: newMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: newMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: newMessage.text,\n//               message_type: \"text\",\n//               timestamp: newMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n//         }\n\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: newMessage.id,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: messageText.trim(),\n//             message_type: \"text\",\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//           });\n//         } catch (error) {\n//           console.error(\"Lỗi gửi tin nhắn:\", error);\n//         }\n//       } else {\n//         const likeMessage = {\n//           id: Date.now(),\n//           text: \"👍\",\n//           type: \"sent\",\n//           timestamp: new Date(),\n//           isTemporary: false,\n//         };\n//         setMessages((prev) => [...prev, likeMessage]);\n\n//         if (socketRef.current) {\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: likeMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               content: \"👍\",\n//               message_type: \"text\",\n//               timestamp: likeMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: likeMessage.id,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: \"👍\",\n//               message_type: \"text\",\n//               timestamp: likeMessage.timestamp.toISOString(),\n//               url: null,\n//             },\n//           });\n//         }\n\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: likeMessage.id,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: \"👍\",\n//             message_type: \"text\",\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//           });\n//         } catch (error) {\n//           console.error(\"Lỗi gửi tin nhắn like:\", error);\n//         }\n//       }\n//     },\n//     [friend, onUpdateChat, setMessages, socketRef]\n//   );\n\n//   const handleMediaSelect = useCallback(\n//     async (e, mediaType) => {\n//       if (!friend || !friend.id || !friend.sender) return;\n\n//       const file = e.target.files[0];\n//       if (!file) {\n//         alert(\"Vui lòng chọn một tệp.\");\n//         return;\n//       }\n\n//       if (file.size > 50 * 1024 * 1024) {\n//         alert(\"Tệp quá lớn. Kích thước tối đa là 50MB.\");\n//         return;\n//       }\n\n//       if (mediaType === \"image\" && !file.type.startsWith(\"image/\")) {\n//         alert(\"Vui lòng chọn tệp hình ảnh.\");\n//         return;\n//       }\n\n//       if (mediaType === \"video\" && !file.type.startsWith(\"video/\")) {\n//         alert(\"Vui lòng chọn tệp video.\");\n//         return;\n//       }\n\n//       const tempMessageId = Date.now() + Math.random();\n\n//       if (mediaType === \"file\") {\n//         await uploadFileDirectly(file, mediaType, tempMessageId);\n//       } else {\n//         const reader = new FileReader();\n//         reader.onload = () => {\n//           const tempMessage = {\n//             id: tempMessageId,\n//             type: \"sent\",\n//             timestamp: new Date(),\n//             uploading: true,\n//             fileName: file.name,\n//             isTemporary: true,\n//           };\n\n//           let base64Data = null;\n//           if (mediaType === \"image\") {\n//             tempMessage.temporaryImage = reader.result;\n//             base64Data = reader.result;\n//           } else if (mediaType === \"video\") {\n//             tempMessage.temporaryVideo = reader.result;\n//             base64Data = reader.result;\n//           }\n\n//           setMessages((prev) => [...prev, tempMessage]);\n\n//           if (socketRef.current) {\n//             socketRef.current.emit(\"sendMessage\", {\n//               toUserId: friend.member,\n//               message: {\n//                 id: tempMessageId,\n//                 conversation_id: friend.id,\n//                 sender: friend.sender,\n//                 recipient: friend.member,\n//                 content: file.name,\n//                 message_type: mediaType,\n//                 timestamp: new Date().toISOString(),\n//                 url: null,\n//                 base64Data: base64Data,\n//               },\n//             });\n\n//             socketRef.current.emit(\"sendMessage\", {\n//               toUserId: friend.sender,\n//               message: {\n//                 id: tempMessageId,\n//                 conversation_id: friend.id,\n//                 sender: friend.sender,\n//                 recipient: friend.sender,\n//                 content: file.name,\n//                 message_type: mediaType,\n//                 timestamp: new Date().toISOString(),\n//                 url: null,\n//                 base64Data: base64Data,\n//               },\n//             });\n//           }\n\n//           uploadFileToServer(file, mediaType, tempMessageId, base64Data);\n//         };\n\n//         reader.onerror = () => {\n//           alert(\"Lỗi khi đọc tệp.\");\n//         };\n//         reader.readAsDataURL(file);\n//       }\n//     },\n//     [friend, onUpdateChat, setMessages, socketRef]\n//   );\n\n//   const uploadFileDirectly = async (file, mediaType, messageId) => {\n//     if (!friend || !friend.id || !friend.sender) return;\n\n//     const formData = new FormData();\n//     formData.append(\"file\", file, encodeURIComponent(file.name));\n\n//     try {\n//       const uploadingMessage = {\n//         id: messageId,\n//         type: \"sent\",\n//         timestamp: new Date(),\n//         uploading: true,\n//         fileName: file.name,\n//         isTemporary: false,\n//       };\n//       setMessages((prev) => [...prev, uploadingMessage]);\n\n//       const uploadResponse = await axios.post(`http://localhost:5000/upload-file`, formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           \"Accept\": \"application/json\",\n//         },\n//       });\n\n//       if (uploadResponse.data.url) {\n//         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n//         const fullUrl = uploadResponse.data.url;\n\n//         const fileMessage = {\n//           id: messageId,\n//           type: \"sent\",\n//           timestamp: new Date(),\n//           uploading: false,\n//           fileName: file.name,\n//           file: {\n//             name: decodeURIComponent(file.name),\n//             url: fullUrl,\n//           },\n//           isTemporary: false,\n//         };\n\n//         setMessages((prev) =>\n//           prev.map((msg) => {\n//             if (msg.id === messageId) {\n//               return fileMessage;\n//             }\n//             return msg;\n//           })\n//         );\n\n//         if (socketRef.current) {\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               content: decodeURIComponent(file.name),\n//               message_type: mediaType,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: decodeURIComponent(file.name),\n//               message_type: mediaType,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n//         }\n\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: messageId,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: decodeURIComponent(file.name),\n//             message_type: mediaType,\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//             url: filePath,\n//           });\n//         } catch (messageError) {\n//           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n//         }\n//       }\n//     } catch (uploadError) {\n//       setMessages((prev) =>\n//         prev.map((msg) => {\n//           if (msg.id === messageId) {\n//             return {\n//               ...msg,\n//               uploading: false,\n//               error: true,\n//               isTemporary: false,\n//             };\n//           }\n//           return msg;\n//         })\n//       );\n//       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n//     }\n//   };\n\n//   const uploadFileToServer = async (file, mediaType, messageId, base64Data = null) => {\n//     if (!friend || !friend.id || !friend.sender) return;\n\n//     const formData = new FormData();\n//     let endpoint;\n\n//     if (mediaType === \"image\") {\n//       formData.append(\"file\", file, encodeURIComponent(file.name));\n//       endpoint = \"/upload-file\";\n//     } else if (mediaType === \"video\") {\n//       formData.append(\"video\", file, encodeURIComponent(file.name));\n//       endpoint = \"/upload-file\";\n//     }\n\n//     try {\n//       const uploadResponse = await axios.post(`http://localhost:5000${endpoint}`, formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           \"Accept\": \"application/json\",\n//         },\n//       });\n\n//       if (uploadResponse.data.url) {\n//         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n//         const fullUrl = uploadResponse.data.url;\n\n//         setMessages((prev) =>\n//           prev.map((msg) => {\n//             if (msg.id === messageId) {\n//               const updatedMsg = {\n//                 ...msg,\n//                 uploading: false,\n//                 isTemporary: false,\n//                 image: mediaType === \"image\" ? fullUrl : msg.image,\n//                 video: mediaType === \"video\" ? fullUrl : msg.video,\n//               };\n//               return updatedMsg;\n//             }\n//             return msg;\n//           })\n//         );\n\n//         if (socketRef.current) {\n//           // Gửi updateMessage tới người nhận\n//           socketRef.current.emit(\"updateMessage\", {\n//             toUserId: friend.member,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               message_type: mediaType,\n//               content: decodeURIComponent(file.name),\n//               sender: friend.sender,\n//               recipient: friend.member,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n\n//           // Gửi sendMessage tới chính người gửi\n//           socketRef.current.emit(\"sendMessage\", {\n//             toUserId: friend.sender,\n//             message: {\n//               id: messageId,\n//               conversation_id: friend.id,\n//               sender: friend.sender,\n//               recipient: friend.sender,\n//               content: decodeURIComponent(file.name),\n//               message_type: mediaType,\n//               timestamp: new Date().toISOString(),\n//               url: filePath,\n//             },\n//           });\n//         }\n\n//         try {\n//           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n//             id: messageId,\n//             conversationId: friend.id,\n//             sender: friend.sender,\n//             content: decodeURIComponent(file.name),\n//             message_type: mediaType,\n//             timestamp: new Date().toISOString(),\n//             recipient: friend.member,\n//             url: filePath,\n//           });\n//         } catch (messageError) {\n//           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n//         }\n//       }\n//     } catch (uploadError) {\n//       setMessages((prev) =>\n//         prev.map((msg) => {\n//           if (msg.id === messageId) {\n//             return {\n//               ...msg,\n//               uploading: false,\n//               error: true,\n//               isTemporary: false,\n//             };\n//           }\n//           return msg;\n//         })\n//       );\n//       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n//     }\n//   };\n\n//   return { handleSend, handleMediaSelect };\n// };\n\n// export default useChatActions;\n\n\nimport { useCallback } from \"react\";\nimport axios from \"axios\";\n\nconst useChatActions = (friend, onUpdateChat, setMessages, socketRef) => {\n\n  const handleSend = useCallback(\n    async (messageText = \"\") => {\n      if (!friend || !friend.id || !friend.sender) return;\n\n      if (messageText.trim()) {\n        const newMessage = {\n          id: Date.now(),\n          text: messageText.trim(),\n          type: \"sent\",\n          timestamp: new Date(),\n          isTemporary: false,\n        };\n        setMessages((prev) => [...prev, newMessage]);\n\n        if (socketRef.current) {\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.member,\n            message: {\n              id: newMessage.id,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.member,\n              content: newMessage.text,\n              message_type: \"text\",\n              timestamp: newMessage.timestamp.toISOString(),\n              url: null,\n            },\n          });\n\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.sender,\n            message: {\n              id: newMessage.id,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.sender,\n              content: newMessage.text,\n              message_type: \"text\",\n              timestamp: newMessage.timestamp.toISOString(),\n              url: null,\n            },\n          });\n        }\n\n        try {\n          await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n            id: newMessage.id,\n            conversationId: friend.id,\n            sender: friend.sender,\n            content: messageText.trim(),\n            message_type: \"text\",\n            timestamp: new Date().toISOString(),\n            recipient: friend.member,\n          });\n        } catch (error) {\n          console.error(\"Lỗi gửi tin nhắn:\", error);\n        }\n      } else {\n        const likeMessage = {\n          id: Date.now(),\n          text: \"👍\",\n          type: \"sent\",\n          timestamp: new Date(),\n          isTemporary: false,\n        };\n        setMessages((prev) => [...prev, likeMessage]);\n\n        if (socketRef.current) {\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.member,\n            message: {\n              id: likeMessage.id,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.member,\n              content: \"👍\",\n              message_type: \"text\",\n              timestamp: likeMessage.timestamp.toISOString(),\n              url: null,\n            },\n          });\n\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.sender,\n            message: {\n              id: likeMessage.id,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.sender,\n              content: \"👍\",\n              message_type: \"text\",\n              timestamp: likeMessage.timestamp.toISOString(),\n              url: null,\n            },\n          });\n        }\n\n        try {\n          await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n            id: likeMessage.id,\n            conversationId: friend.id,\n            sender: friend.sender,\n            content: \"👍\",\n            message_type: \"text\",\n            timestamp: new Date().toISOString(),\n            recipient: friend.member,\n          });\n        } catch (error) {\n          console.error(\"Lỗi gửi tin nhắn like:\", error);\n        }\n      }\n    },\n    [friend, onUpdateChat, setMessages, socketRef]\n  );\n\n  const handleMediaSelect = useCallback(\n    async (e, mediaType) => {\n      if (!friend || !friend.id || !friend.sender) return;\n\n      const file = e.target.files[0];\n      if (!file) {\n        alert(\"Vui lòng chọn một tệp.\");\n        return;\n      }\n\n      if (file.size > 50 * 1024 * 1024) {\n        alert(\"Tệp quá lớn. Kích thước tối đa là 50MB.\");\n        return;\n      }\n\n      if (mediaType === \"image\" && !file.type.startsWith(\"image/\")) {\n        alert(\"Vui lòng chọn tệp hình ảnh.\");\n        return;\n      }\n\n      if (mediaType === \"video\" && !file.type.startsWith(\"video/\")) {\n        alert(\"Vui lòng chọn tệp video.\");\n        return;\n      }\n\n      const tempMessageId = Date.now() + Math.random();\n\n      if (mediaType === \"file\") {\n        await uploadFileDirectly(file, mediaType, tempMessageId);\n      } else {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const tempMessage = {\n            id: tempMessageId,\n            type: \"sent\",\n            timestamp: new Date(),\n            uploading: true,\n            fileName: file.name,\n            isTemporary: true,\n          };\n\n          let base64Data = null;\n          if (mediaType === \"image\") {\n            tempMessage.temporaryImage = reader.result;\n            base64Data = reader.result;\n          } else if (mediaType === \"video\") {\n            tempMessage.temporaryVideo = reader.result;\n            base64Data = reader.result;\n          }\n\n          setMessages((prev) => [...prev, tempMessage]);\n\n          if (socketRef.current) {\n            socketRef.current.emit(\"sendMessage\", {\n              toUserId: friend.member,\n              message: {\n                id: tempMessageId,\n                conversation_id: friend.id,\n                sender: friend.sender,\n                recipient: friend.member,\n                content: file.name,\n                message_type: mediaType,\n                timestamp: new Date().toISOString(),\n                url: null,\n                base64Data: base64Data,\n              },\n            });\n\n            socketRef.current.emit(\"sendMessage\", {\n              toUserId: friend.sender,\n              message: {\n                id: tempMessageId,\n                conversation_id: friend.id,\n                sender: friend.sender,\n                recipient: friend.sender,\n                content: file.name,\n                message_type: mediaType,\n                timestamp: new Date().toISOString(),\n                url: null,\n                base64Data: base64Data,\n              },\n            });\n          }\n\n          uploadFileToServer(file, mediaType, tempMessageId, base64Data);\n        };\n\n        reader.onerror = () => {\n          alert(\"Lỗi khi đọc tệp.\");\n        };\n        reader.readAsDataURL(file);\n      }\n    },\n    [friend, onUpdateChat, setMessages, socketRef]\n  );\n\n  const uploadFileDirectly = async (file, mediaType, messageId) => {\n    if (!friend || !friend.id || !friend.sender) return;\n\n    const formData = new FormData();\n    formData.append(\"file\", file, encodeURIComponent(file.name));\n\n    try {\n      const uploadingMessage = {\n        id: messageId,\n        type: \"sent\",\n        timestamp: new Date(),\n        uploading: true,\n        fileName: file.name,\n        isTemporary: false,\n      };\n      setMessages((prev) => [...prev, uploadingMessage]);\n\n      const uploadResponse = await axios.post(`http://localhost:5000/upload-file`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          \"Accept\": \"application/json\",\n        },\n      });\n\n      if (uploadResponse.data.url) {\n        const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n        const fullUrl = uploadResponse.data.url;\n\n        const fileMessage = {\n          id: messageId,\n          type: \"sent\",\n          timestamp: new Date(),\n          uploading: false,\n          fileName: file.name,\n          file: {\n            name: decodeURIComponent(file.name),\n            url: fullUrl,\n          },\n          isTemporary: false,\n        };\n\n        setMessages((prev) =>\n          prev.map((msg) => {\n            if (msg.id === messageId) {\n              return fileMessage;\n            }\n            return msg;\n          })\n        );\n\n        if (socketRef.current) {\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.member,\n            message: {\n              id: messageId,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.member,\n              content: decodeURIComponent(file.name),\n              message_type: mediaType,\n              timestamp: new Date().toISOString(),\n              url: filePath,\n            },\n          });\n\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.sender,\n            message: {\n              id: messageId,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.sender,\n              content: decodeURIComponent(file.name),\n              message_type: mediaType,\n              timestamp: new Date().toISOString(),\n              url: filePath,\n            },\n          });\n        }\n\n        try {\n          await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n            id: messageId,\n            conversationId: friend.id,\n            sender: friend.sender,\n            content: decodeURIComponent(file.name),\n            message_type: mediaType,\n            timestamp: new Date().toISOString(),\n            recipient: friend.member,\n            url: filePath,\n          });\n        } catch (messageError) {\n          console.error(\"Lỗi gửi tin nhắn:\", messageError);\n        }\n      }\n    } catch (uploadError) {\n      setMessages((prev) =>\n        prev.map((msg) => {\n          if (msg.id === messageId) {\n            return {\n              ...msg,\n              uploading: false,\n              error: true,\n              isTemporary: false,\n            };\n          }\n          return msg;\n        })\n      );\n      alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n    }\n  };\n\n  const uploadFileToServer = async (file, mediaType, messageId, base64Data = null) => {\n    if (!friend || !friend.id || !friend.sender) return;\n\n    const formData = new FormData();\n    let endpoint;\n\n    if (mediaType === \"image\") {\n      formData.append(\"file\", file, encodeURIComponent(file.name));\n      endpoint = \"/upload-file\";\n    } else if (mediaType === \"video\") {\n      // ✅ SỬA: Đổi \"video\" thành \"file\"\n      formData.append(\"file\", file, encodeURIComponent(file.name));\n      endpoint = \"/upload-file\";\n    }\n\n    try {\n      const uploadResponse = await axios.post(`http://localhost:5000${endpoint}`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          \"Accept\": \"application/json\",\n        },\n      });\n\n      if (uploadResponse.data.url) {\n        const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n        const fullUrl = uploadResponse.data.url;\n\n        setMessages((prev) =>\n          prev.map((msg) => {\n            if (msg.id === messageId) {\n              const updatedMsg = {\n                ...msg,\n                uploading: false,\n                isTemporary: false,\n                image: mediaType === \"image\" ? fullUrl : msg.image,\n                video: mediaType === \"video\" ? fullUrl : msg.video,\n              };\n              return updatedMsg;\n            }\n            return msg;\n          })\n        );\n\n        if (socketRef.current) {\n          // Gửi updateMessage tới người nhận\n          socketRef.current.emit(\"updateMessage\", {\n            toUserId: friend.member,\n            message: {\n              id: messageId,\n              conversation_id: friend.id,\n              message_type: mediaType,\n              content: decodeURIComponent(file.name),\n              sender: friend.sender,\n              recipient: friend.member,\n              timestamp: new Date().toISOString(),\n              url: filePath,\n            },\n          });\n\n          // Gửi sendMessage tới chính người gửi\n          socketRef.current.emit(\"sendMessage\", {\n            toUserId: friend.sender,\n            message: {\n              id: messageId,\n              conversation_id: friend.id,\n              sender: friend.sender,\n              recipient: friend.sender,\n              content: decodeURIComponent(file.name),\n              message_type: mediaType,\n              timestamp: new Date().toISOString(),\n              url: filePath,\n            },\n          });\n        }\n\n        try {\n          await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n            id: messageId,\n            conversationId: friend.id,\n            sender: friend.sender,\n            content: decodeURIComponent(file.name),\n            message_type: mediaType,\n            timestamp: new Date().toISOString(),\n            recipient: friend.member,\n            url: filePath,\n          });\n        } catch (messageError) {\n          console.error(\"Lỗi gửi tin nhắn:\", messageError);\n        }\n      }\n    } catch (uploadError) {\n      setMessages((prev) =>\n        prev.map((msg) => {\n          if (msg.id === messageId) {\n            return {\n              ...msg,\n              uploading: false,\n              error: true,\n              isTemporary: false,\n            };\n          }\n          return msg;\n        })\n      );\n      alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n    }\n  };\n\n  return { handleSend, handleMediaSelect };\n};\n\nexport default useChatActions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
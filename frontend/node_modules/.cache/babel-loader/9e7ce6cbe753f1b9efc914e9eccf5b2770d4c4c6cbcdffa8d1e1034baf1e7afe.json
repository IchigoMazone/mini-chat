{"ast":null,"code":"// // import classNames from \"classnames/bind\";\n// // import styles from \"./Chat.module.scss\";\n// // import { useState, useEffect, useRef, useCallback } from \"react\";\n// // import ProFile1 from \"~/pages/ProFile1\";\n// // import ChatPreview from \"./ChatPreview\";\n// // import FriendRequestBar from \"./FriendRequestBar\";\n// // import FriendRequestConfirmationBar from \"./FriendRequestConfirmationBar\";\n// // import ChatHeader from \"./ChatHeader\";\n// // import { FileText } from \"lucide-react\";\n// // import axios from \"axios\";\n// // import { io } from \"socket.io-client\";\n// // const cx = classNames.bind(styles);\n// // function Chat({ friend, onToggleDetail, onUpdateChat }) {\n// //   const [open, setOpen] = useState(false);\n// //   const [text, setText] = useState(\"\");\n// //   const [showProfile, setShowProFile] = useState(false);\n// //   const [previewImage, setPreviewImage] = useState(null);\n// //   const messagesContainerRef = useRef(null);\n// //   const [messages, setMessages] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isLoadingMore, setIsLoadingMore] = useState(false);\n// //   const [hasMore, setHasMore] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showSendRequestBar, setShowSendRequestBar] = useState(false);\n// //   const socketRef = useRef(null);\n// //   const handleAvatarClick = useCallback(() => {\n// //     setShowProFile(true);\n// //   }, []);\n// //   const handleSendFriendRequest = useCallback((friendId, friendName) => {\n// //     console.log(`Gửi lời mời kết bạn tới ID ${friendId}: ${friendName}`);\n// //   }, []);\n// //   const handleConfirmFriendRequest = useCallback((friendId, friendName) => {\n// //     console.log(`Xác nhận lời mời kết bạn từ ID ${friendId}: ${friendName}`);\n// //   }, []);\n// //   const handleRejectFriendRequest = useCallback((friendId, friendName) => {\n// //     console.log(`Từ chối lời mời kết bạn từ ID ${friendId}: ${friendName}`);\n// //   }, []);\n// //   const handleClosePreview = useCallback(() => {\n// //     setPreviewImage(null);\n// //   }, []);\n// //   const formatTime = (dateObj) => {\n// //     return dateObj.toLocaleTimeString(\"vi-VN\", {\n// //       hour: \"2-digit\",\n// //       minute: \"2-digit\",\n// //       hour12: true,\n// //     });\n// //   };\n// //   const formatSeparator = (dateObj) => {\n// //     return (\n// //       dateObj.toLocaleDateString(\"vi-VN\", { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" }) +\n// //       \" \" +\n// //       formatTime(dateObj)\n// //     );\n// //   };\n// //   const isValidUrl = (url) => {\n// //     try {\n// //       new URL(url);\n// //       return true;\n// //     } catch {\n// //       return false;\n// //     }\n// //   };\n// //   const renderMessageContent = (message) => {\n// //     if (message.uploading) {\n// //       return (\n// //         <div className={cx(\"message-uploading\")}>\n// //           <span>Đang tải {message.fileName}...</span>\n// //           <div className={cx(\"uploading-progress\")}>\n// //             <div className={cx(\"progress-bar\")}></div>\n// //           </div>\n// //         </div>\n// //       );\n// //     }\n// //     if (message.error) {\n// //       return (\n// //         <div className={cx(\"message-error\")}>\n// //           <span>Lỗi tải {message.fileName}</span>\n// //         </div>\n// //       );\n// //     }\n// //     if (message.temporaryImage || message.image) {\n// //       const imageSource = message.temporaryImage || message.image;\n// //       const isBase64 = imageSource && imageSource.startsWith(\"data:image/\");\n// //       return (\n// //         <div\n// //           className={cx(\"message-image\", { temporary: message.isTemporary })}\n// //           onClick={() => setPreviewImage(imageSource)}\n// //           aria-label=\"Xem trước hình ảnh\"\n// //         >\n// //           <img\n// //             src={\n// //               isBase64\n// //                 ? imageSource\n// //                 : imageSource && imageSource.startsWith(\"http\")\n// //                 ? imageSource\n// //                 : `http://localhost:5000${imageSource}`\n// //             }\n// //             alt={message.fileName || \"Hình ảnh được chia sẻ\"}\n// //             className={cx(\"image-content\")}\n// //             onError={(e) => {\n// //               console.error(\"Lỗi tải hình ảnh:\", e.target.src);\n// //               e.target.parentElement.style.display = \"none\";\n// //             }}\n// //           />\n// //           {message.uploading && (\n// //             <div className={cx(\"uploading-indicator\")}>\n// //               Đang tải...\n// //             </div>\n// //           )}\n// //         </div>\n// //       );\n// //     }\n// //     if (message.temporaryVideo || message.video) {\n// //       const videoSource = message.temporaryVideo || message.video;\n// //       const isBase64 = videoSource && videoSource.startsWith(\"data:video/\");\n// //       return (\n// //         <div className={cx(\"message-video\", { temporary: message.isTemporary })}>\n// //           <video controls className={cx(\"video-content\")}>\n// //             <source\n// //               src={\n// //                 isBase64\n// //                   ? videoSource\n// //                   : videoSource && videoSource.startsWith(\"http\")\n// //                   ? videoSource\n// //                   : `http://localhost:5000${videoSource}`\n// //               }\n// //               type=\"video/mp4\"\n// //             />\n// //             Trình duyệt của bạn không hỗ trợ thẻ video.\n// //           </video>\n// //           {message.uploading && (\n// //             <div className={cx(\"uploading-indicator\")}>\n// //               Đang tải...\n// //             </div>\n// //           )}\n// //         </div>\n// //       );\n// //     }\n// //     if (message.file) {\n// //       const handleDownload = async (url, filename, e) => {\n// //         e.preventDefault();\n// //         e.stopPropagation();\n// //         try {\n// //           const response = await fetch(url);\n// //           const blob = await response.blob();\n// //           const link = document.createElement(\"a\");\n// //           link.href = window.URL.createObjectURL(blob);\n// //           link.download = filename;\n// //           link.click();\n// //           window.URL.revokeObjectURL(link.href);\n// //         } catch (error) {\n// //           console.error(\"Tải xuống thất bại:\", error);\n// //         }\n// //       };\n// //       const fileUrl = message.file.url.startsWith(\"http\")\n// //         ? message.file.url\n// //         : `http://localhost:5000${message.file.url}`;\n// //       return (\n// //         <div className={cx(\"message-file\")}>\n// //           <div className={cx(\"file-container\")}>\n// //             <div className={cx(\"file-icon\")}>\n// //               <FileText size={20} />\n// //             </div>\n// //             <div className={cx(\"file-info\")}>\n// //               <div className={cx(\"file-name\")}>{message.file.name}</div>\n// //               {message.file.url && (\n// //                 <a\n// //                   href={fileUrl}\n// //                   className={cx(\"download-link\")}\n// //                   onClick={(e) => handleDownload(fileUrl, message.file.name, e)}\n// //                 >\n// //                   Tải xuống\n// //                 </a>\n// //               )}\n// //             </div>\n// //           </div>\n// //         </div>\n// //       );\n// //     }\n// //     if (typeof message.text === \"string\" && message.text) {\n// //       const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n// //       const parts = message.text.split(urlRegex);\n// //       return (\n// //         <span>\n// //           {parts.map((part, index) => {\n// //             if (part.match(urlRegex) && isValidUrl(part)) {\n// //               return (\n// //                 <a\n// //                   key={index}\n// //                   href={part}\n// //                   target=\"_blank\"\n// //                   rel=\"noopener noreferrer\"\n// //                   className={cx(\"message-link\")}\n// //                 >\n// //                   {part}\n// //                 </a>\n// //               );\n// //             }\n// //             return part;\n// //           })}\n// //         </span>\n// //       );\n// //     }\n// //     return <span>{message.text || \"\"}</span>;\n// //   };\n// //   const scrollToBottom = useCallback(() => {\n// //     if (messagesContainerRef.current) {\n// //       messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n// //     }\n// //   }, []);\n// //   useEffect(() => {\n// //     if (messages.length > 0) {\n// //       const lastMessage = messages[messages.length - 1];\n// //       const previousLastMessageId = localStorage.getItem('lastMessageId');\n// //       if (!previousLastMessageId || previousLastMessageId !== lastMessage.id.toString()) {\n// //         scrollToBottom();\n// //         localStorage.setItem('lastMessageId', lastMessage.id.toString());\n// //       }\n// //     }\n// //   }, [messages.length, scrollToBottom]);\n// //   // Socket connection - sửa đổi để luôn lắng nghe tất cả tin nhắn\n// //   useEffect(() => {\n// //     if (!friend?.sender) return; // Sử dụng friend.sender như code gốc\n// //     // Kết nối socket với userId của người dùng hiện tại\n// //     socketRef.current = io(\"http://localhost:5000\", {\n// //       query: { userId: friend.sender },\n// //     });\n// //     // Lắng nghe tin nhắn từ tất cả cuộc trò chuyện\n// //     socketRef.current.on(\"receiveMessage\", (data) => {\n// //       console.log(\"Nhận tin nhắn qua Socket.IO:\", data);\n// //       const receivedMessage = {\n// //         id: data.message.id || Date.now() + Math.random(),\n// //         text: data.message.message_type === \"text\" && typeof data.message.content === \"string\" ? data.message.content : \"\",\n// //         type: data.message.sender === friend.sender ? \"sent\" : \"received\",\n// //         timestamp: new Date(data.message.timestamp),\n// //         temporaryImage: data.message.message_type === \"image\" && data.message.base64Data ? data.message.base64Data : null,\n// //         image: data.message.message_type === \"image\" && data.message.url ? `http://localhost:5000${data.message.url}` : null,\n// //         temporaryVideo: data.message.message_type === \"video\" && data.message.base64Data ? data.message.base64Data : null,\n// //         video: data.message.message_type === \"video\" && data.message.url ? `http://localhost:5000${data.message.url}` : null,\n// //         file: data.message.message_type === \"file\" ? {\n// //           name: data.message.content,\n// //           url: data.message.url ? `http://localhost:5000${data.message.url}` : null,\n// //         } : null,\n// //         isTemporary: data.message.message_type === \"file\" ? false : !!data.message.base64Data,\n// //       };\n// //       // Nếu tin nhắn thuộc về cuộc trò chuyện hiện tại, thêm vào messages\n// //       if (data.message.conversation_id === friend.id) {\n// //         setMessages((prev) => {\n// //           const existingMessageIndex = prev.findIndex((msg) => msg.id === receivedMessage.id);\n// //           if (existingMessageIndex !== -1) {\n// //             const updatedMessages = [...prev];\n// //             updatedMessages[existingMessageIndex] = {\n// //               ...updatedMessages[existingMessageIndex],\n// //               temporaryImage: receivedMessage.temporaryImage || updatedMessages[existingMessageIndex].temporaryImage,\n// //               image: receivedMessage.image || updatedMessages[existingMessageIndex].image,\n// //               temporaryVideo: receivedMessage.temporaryVideo || updatedMessages[existingMessageIndex].temporaryVideo,\n// //               video: receivedMessage.video || updatedMessages[existingMessageIndex].video,\n// //               file: receivedMessage.file || updatedMessages[existingMessageIndex].file,\n// //               isTemporary: data.message.message_type === \"file\" ? false : false,\n// //             };\n// //             return updatedMessages;\n// //           }\n// //           if (!prev.length || receivedMessage.timestamp > prev[prev.length - 1].timestamp) {\n// //             return [...prev, receivedMessage];\n// //           }\n// //           return prev;\n// //         });\n// //       }\n// //       // Luôn cập nhật chat list cho tất cả tin nhắn (không phụ thuộc vào cuộc trò chuyện hiện tại)\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ receiveMessage (global):\", data.message.conversation_id, {\n// //           content: receivedMessage.text || receivedMessage.file?.name || \"Media\",\n// //           sender: data.message.sender,\n// //           timestamp: data.message.timestamp,\n// //           message_type: data.message.message_type,\n// //         });\n// //         onUpdateChat(data.message.conversation_id, {\n// //           content: receivedMessage.text || receivedMessage.file?.name || \"Media\",\n// //           sender: data.message.sender,\n// //           timestamp: data.message.timestamp,\n// //           message_type: data.message.message_type,\n// //         });\n// //       }\n// //     });\n// //     socketRef.current.on(\"updateMessage\", (data) => {\n// //       console.log(\"Cập nhật tin nhắn qua Socket.IO:\", data);\n// //       // Chỉ cập nhật tin nhắn nếu đang trong cuộc trò chuyện đó\n// //       if (data.message.conversation_id === friend.id) {\n// //         setMessages((prev) =>\n// //           prev.map((msg) => {\n// //             if (msg.id === data.message.id) {\n// //               return {\n// //                 ...msg,\n// //                 image: data.message.url && data.message.message_type === \"image\" ? `http://localhost:5000${data.message.url}` : msg.image,\n// //                 video: data.message.url && data.message.message_type === \"video\" ? `http://localhost:5000${data.message.url}` : msg.video,\n// //                 file: data.message.url && data.message.message_type === \"file\" ? {\n// //                   name: msg.file?.name || data.message.content,\n// //                   url: `http://localhost:5000${data.message.url}`,\n// //                 } : msg.file,\n// //                 isTemporary: false,\n// //                 uploading: false,\n// //               };\n// //             }\n// //             return msg;\n// //           })\n// //         );\n// //         // Cập nhật chat list khi có update message\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ updateMessage:\", friend.id, {\n// //             content: data.message.content || \"Media\",\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: data.message.message_type,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: data.message.content || \"Media\",\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: data.message.message_type,\n// //           });\n// //         }\n// //       }\n// //     });\n// //     return () => {\n// //       if (socketRef.current) {\n// //         socketRef.current.disconnect();\n// //         console.log(\"Ngắt kết nối Socket.IO trong Chat\");\n// //       }\n// //     };\n// //   }, [friend, onUpdateChat]); // Giữ nguyên dependencies như code gốc\n// //   // Join/leave chat room khi chuyển cuộc trò chuyện\n// //   useEffect(() => {\n// //     if (socketRef.current && friend?.id) {\n// //       socketRef.current.emit(\"joinChat\", friend.id);\n// //       console.log(\"Join chat room:\", friend.id);\n// //       return () => {\n// //         if (socketRef.current && friend?.id) {\n// //           socketRef.current.emit(\"leaveChat\", friend.id);\n// //           console.log(\"Leave chat room:\", friend.id);\n// //         }\n// //       };\n// //     }\n// //   }, [friend?.id]);\n// //   const fetchMessages = useCallback(async (before = null) => {\n// //     if (!friend || !friend.id || !friend.sender) {\n// //       setMessages([]);\n// //       setLoading(false);\n// //       setHasMore(false);\n// //       return;\n// //     }\n// //     try {\n// //       const payload = {\n// //         friendId: friend.id,\n// //         limit: 50,\n// //       };\n// //       if (before) {\n// //         payload.before = before;\n// //       }\n// //       const response = await axios.post(\"http://localhost:5000/api/chat/messages/\", payload);\n// //       if (response.status === 200 && Array.isArray(response.data)) {\n// //         const transformedMessages = response.data\n// //           .map((msg) => ({\n// //             id: msg.id,\n// //             text: msg.message_type === \"text\" && typeof msg.content === \"string\" ? msg.content : \"\",\n// //             type: msg.sender === friend.sender ? \"sent\" : \"received\",\n// //             timestamp: new Date(msg.timestamp),\n// //             image: msg.message_type === \"image\" ? `http://localhost:5000${msg.url}` : null,\n// //             video: msg.message_type === \"video\" ? `http://localhost:5000${msg.url}` : null,\n// //             file: msg.message_type === \"file\" ? { name: msg.content, url: `http://localhost:5000${msg.url}` } : null,\n// //             isTemporary: false,\n// //           }))\n// //           .filter((msg) => msg.text || msg.image || msg.video || msg.file);\n// //         setMessages((prev) => {\n// //           if (before) {\n// //             return [...transformedMessages, ...prev].filter((msg, index, self) =>\n// //               index === self.findIndex((m) => m.id === msg.id)\n// //             );\n// //           } else {\n// //             localStorage.removeItem('lastMessageId');\n// //             return transformedMessages;\n// //           }\n// //         });\n// //         setHasMore(transformedMessages.length === 50);\n// //       } else {\n// //         setError(\"Dữ liệu tin nhắn không hợp lệ.\");\n// //         setHasMore(false);\n// //       }\n// //     } catch (err) {\n// //       setError(\"Lỗi khi tải tin nhắn: \" + err.message);\n// //       console.error(\"Lỗi khi lấy tin nhắn:\", err);\n// //       setHasMore(false);\n// //     } finally {\n// //       setLoading(false);\n// //       setIsLoadingMore(false);\n// //     }\n// //   }, [friend]);\n// //   useEffect(() => {\n// //     setLoading(true);\n// //     setIsLoadingMore(false);\n// //     setHasMore(true);\n// //     setError(null);\n// //     setMessages([]);\n// //     fetchMessages(null);\n// //   }, [friend, fetchMessages]);\n// //   const loadMoreMessages = useCallback(() => {\n// //     if (messages.length === 0) return;\n// //     const firstMessage = messages[0];\n// //     const before = firstMessage.timestamp.toISOString();\n// //     fetchMessages(before);\n// //   }, [messages, fetchMessages]);\n// //   const handleScroll = useCallback(() => {\n// //     const container = messagesContainerRef.current;\n// //     if (!container) return;\n// //     if (container.scrollTop <= 100 && hasMore && !isLoadingMore && !loading) {\n// //       setIsLoadingMore(true);\n// //       loadMoreMessages();\n// //     }\n// //   }, [hasMore, isLoadingMore, loading, loadMoreMessages]);\n// //   useEffect(() => {\n// //     const container = messagesContainerRef.current;\n// //     if (container) {\n// //       container.addEventListener(\"scroll\", handleScroll);\n// //       return () => container.removeEventListener(\"scroll\", handleScroll);\n// //     }\n// //   }, [handleScroll]);\n// //   const toggleRequestBar = useCallback(() => {\n// //     setShowSendRequestBar((prev) => !prev);\n// //   }, []);\n// //   const emojis = [\"😀\", \"😂\", \"😍\", \"😊\", \"😎\", \"🤔\", \"👍\", \"❤️\", \"🎉\", \"🔥\", \"💯\", \"✨\"];\n// //   const handleEmoji = useCallback((emoji) => {\n// //     setText((prev) => prev + emoji);\n// //     setOpen(false);\n// //   }, []);\n// //   const handleSend = useCallback(async () => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n// //     if (text.trim()) {\n// //       const newMessage = {\n// //         id: Date.now(),\n// //         text: text.trim(),\n// //         type: \"sent\",\n// //         timestamp: new Date(),\n// //         isTemporary: false,\n// //       };\n// //       setMessages((prev) => [...prev, newMessage]);\n// //       setText(\"\");\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ handleSend:\", friend.id, {\n// //           content: newMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: newMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //         onUpdateChat(friend.id, {\n// //           content: newMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: newMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //       }\n// //       if (socketRef.current) {\n// //         socketRef.current.emit(\"sendMessage\", {\n// //           toUserId: friend.member,\n// //           message: {\n// //             id: newMessage.id,\n// //             conversation_id: friend.id,\n// //             sender: friend.sender,\n// //             recipient: friend.member,\n// //             content: newMessage.text,\n// //             message_type: \"text\",\n// //             timestamp: newMessage.timestamp.toISOString(),\n// //             url: null,\n// //           },\n// //         });\n// //       }\n// //       try {\n// //         await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //           id: newMessage.id,\n// //           conversationId: friend.id,\n// //           sender: friend.sender,\n// //           content: text.trim(),\n// //           message_type: \"text\",\n// //           timestamp: new Date().toISOString(),\n// //           recipient: friend.member,\n// //         });\n// //       } catch (error) {\n// //         console.error(\"Lỗi gửi tin nhắn:\", error);\n// //       }\n// //     } else {\n// //       const likeMessage = {\n// //         id: Date.now(),\n// //         text: \"👍\",\n// //         type: \"sent\",\n// //         timestamp: new Date(),\n// //         isTemporary: false,\n// //       };\n// //       setMessages((prev) => [...prev, likeMessage]);\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ handleSend (like):\", friend.id, {\n// //           content: likeMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: likeMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //         onUpdateChat(friend.id, {\n// //           content: likeMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: likeMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //       }\n// //       if (socketRef.current) {\n// //         socketRef.current.emit(\"sendMessage\", {\n// //           toUserId: friend.member,\n// //           message: {\n// //             id: likeMessage.id,\n// //             conversation_id: friend.id,\n// //             sender: friend.sender,\n// //             recipient: friend.member,\n// //             content: \"👍\",\n// //             message_type: \"text\",\n// //             timestamp: likeMessage.timestamp.toISOString(),\n// //             url: null,\n// //           },\n// //         });\n// //       }\n// //       try {\n// //         await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //           id: likeMessage.id,\n// //           conversationId: friend.id,\n// //           sender: friend.sender,\n// //           content: \"👍\",\n// //           message_type: \"text\",\n// //           timestamp: new Date().toISOString(),\n// //           recipient: friend.member,\n// //         });\n// //       } catch (error) {\n// //         console.error(\"Lỗi gửi tin nhắn like:\", error);\n// //       }\n// //     }\n// //   }, [text, friend, onUpdateChat]);\n// //   const handleKeyPress = useCallback((e) => {\n// //     if (e.key === \"Enter\") {\n// //       handleSend();\n// //     }\n// //   }, [handleSend]);\n// //   const handleMediaSelect = useCallback(async (e, mediaType) => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n// //     const file = e.target.files[0];\n// //     if (!file) {\n// //       alert(\"Vui lòng chọn một tệp.\");\n// //       return;\n// //     }\n// //     if (file.size > 50 * 1024 * 1024) {\n// //       alert(\"Tệp quá lớn. Kích thước tối đa là 50MB.\");\n// //       return;\n// //     }\n// //     if (mediaType === \"image\" && !file.type.startsWith(\"image/\")) {\n// //       alert(\"Vui lòng chọn tệp hình ảnh.\");\n// //       return;\n// //     }\n// //     if (mediaType === \"video\" && !file.type.startsWith(\"video/\")) {\n// //       alert(\"Vui lòng chọn tệp video.\");\n// //       return;\n// //     }\n// //     const tempMessageId = Date.now() + Math.random();\n// //     if (mediaType === \"file\") {\n// //       await uploadFileDirectly(file, mediaType, tempMessageId);\n// //     } else {\n// //       const reader = new FileReader();\n// //       reader.onload = () => {\n// //         const tempMessage = {\n// //           id: tempMessageId,\n// //           type: \"sent\",\n// //           timestamp: new Date(),\n// //           uploading: true,\n// //           fileName: file.name,\n// //           isTemporary: true,\n// //         };\n// //         let base64Data = null;\n// //         if (mediaType === \"image\") {\n// //           tempMessage.temporaryImage = reader.result;\n// //           base64Data = reader.result;\n// //         } else if (mediaType === \"video\") {\n// //           tempMessage.temporaryVideo = reader.result;\n// //           base64Data = reader.result;\n// //         }\n// //         setMessages((prev) => [...prev, tempMessage]);\n// //         scrollToBottom();\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ handleMediaSelect:\", friend.id, {\n// //             content: file.name,\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: file.name,\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //         }\n// //         if (socketRef.current) {\n// //           socketRef.current.emit(\"sendMessage\", {\n// //             toUserId: friend.member,\n// //             message: {\n// //               id: tempMessageId,\n// //               conversation_id: friend.id,\n// //               sender: friend.sender,\n// //               recipient: friend.member,\n// //               content: file.name,\n// //               message_type: mediaType,\n// //               timestamp: new Date().toISOString(),\n// //               url: null,\n// //               base64Data: base64Data,\n// //             },\n// //           });\n// //         }\n// //         uploadFileToServer(file, mediaType, tempMessageId, base64Data);\n// //       };\n// //       reader.onerror = () => {\n// //         alert(\"Lỗi khi đọc tệp.\");\n// //       };\n// //       reader.readAsDataURL(file);\n// //     }\n// //   }, [friend, scrollToBottom, onUpdateChat]);\n// //   const uploadFileDirectly = async (file, mediaType, messageId) => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n// //     const formData = new FormData();\n// //     formData.append(\"file\", file, encodeURIComponent(file.name));\n// //     try {\n// //       const uploadingMessage = {\n// //         id: messageId,\n// //         type: \"sent\",\n// //         timestamp: new Date(),\n// //         uploading: true,\n// //         fileName: file.name,\n// //         isTemporary: false,\n// //       };\n// //       setMessages((prev) => [...prev, uploadingMessage]);\n// //       scrollToBottom();\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ uploadFileDirectly:\", friend.id, {\n// //           content: decodeURIComponent(file.name),\n// //           sender: friend.sender,\n// //           timestamp: new Date().toISOString(),\n// //           message_type: mediaType,\n// //         });\n// //         onUpdateChat(friend.id, {\n// //           content: decodeURIComponent(file.name),\n// //           sender: friend.sender,\n// //           timestamp: new Date().toISOString(),\n// //           message_type: mediaType,\n// //         });\n// //       }\n// //       const uploadResponse = await axios.post(`http://localhost:5000/upload-file`, formData, {\n// //         headers: {\n// //           \"Content-Type\": \"multipart/form-data\",\n// //           \"Accept\": \"application/json\",\n// //         },\n// //       });\n// //       if (uploadResponse.data.url) {\n// //         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n// //         const fullUrl = uploadResponse.data.url;\n// //         const fileMessage = {\n// //           id: messageId,\n// //           type: \"sent\",\n// //           timestamp: new Date(),\n// //           uploading: false,\n// //           fileName: file.name,\n// //           file: {\n// //             name: decodeURIComponent(file.name),\n// //             url: fullUrl,\n// //           },\n// //           isTemporary: false,\n// //         };\n// //         setMessages((prev) =>\n// //           prev.map((msg) => {\n// //             if (msg.id === messageId) {\n// //               return fileMessage;\n// //             }\n// //             return msg;\n// //           })\n// //         );\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ uploadFileDirectly (success):\", friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //         }\n// //         if (socketRef.current) {\n// //           socketRef.current.emit(\"sendMessage\", {\n// //             toUserId: friend.member,\n// //             message: {\n// //               id: messageId,\n// //               conversation_id: friend.id,\n// //               sender: friend.sender,\n// //               recipient: friend.member,\n// //               content: decodeURIComponent(file.name),\n// //               message_type: mediaType,\n// //               timestamp: new Date().toISOString(),\n// //               url: filePath,\n// //             },\n// //           });\n// //         }\n// //         try {\n// //           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //             id: messageId,\n// //             conversationId: friend.id,\n// //             sender: friend.sender,\n// //             content: decodeURIComponent(file.name),\n// //             message_type: mediaType,\n// //             timestamp: new Date().toISOString(),\n// //             recipient: friend.member,\n// //             url: filePath,\n// //           });\n// //         } catch (messageError) {\n// //           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n// //         }\n// //       }\n// //     } catch (uploadError) {\n// //       setMessages((prev) =>\n// //         prev.map((msg) => {\n// //           if (msg.id === messageId) {\n// //             return {\n// //               ...msg,\n// //               uploading: false,\n// //               error: true,\n// //               isTemporary: false,\n// //             };\n// //           }\n// //           return msg;\n// //         })\n// //       );\n// //       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n// //     }\n// //   };\n// //   const uploadFileToServer = async (file, mediaType, messageId, base64Data = null) => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n// //     const formData = new FormData();\n// //     let endpoint;\n// //     if (mediaType === \"image\") {\n// //       formData.append(\"file\", file, encodeURIComponent(file.name));\n// //       endpoint = \"/upload-file\";\n// //     } else if (mediaType === \"video\") {\n// //       formData.append(\"video\", file, encodeURIComponent(file.name));\n// //       endpoint = \"/upload-video\";\n// //     }\n// //     try {\n// //       const uploadResponse = await axios.post(`http://localhost:5000${endpoint}`, formData, {\n// //         headers: {\n// //           \"Content-Type\": \"multipart/form-data\",\n// //           \"Accept\": \"application/json\",\n// //         },\n// //       });\n// //       if (uploadResponse.data.url) {\n// //         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n// //         const fullUrl = uploadResponse.data.url;\n// //         setMessages((prev) =>\n// //           prev.map((msg) => {\n// //             if (msg.id === messageId) {\n// //               const updatedMsg = {\n// //                 ...msg,\n// //                 uploading: false,\n// //                 isTemporary: false,\n// //                 image: mediaType === \"image\" ? fullUrl : msg.image,\n// //                 video: mediaType === \"video\" ? fullUrl : msg.video,\n// //               };\n// //               return updatedMsg;\n// //             }\n// //             return msg;\n// //           })\n// //         );\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ uploadFileToServer:\", friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //         }\n// //         if (socketRef.current) {\n// //           socketRef.current.emit(\"updateMessage\", {\n// //             toUserId: friend.member,\n// //             message: {\n// //               id: messageId,\n// //               conversation_id: friend.id,\n// //               message_type: mediaType,\n// //               url: filePath,\n// //             },\n// //           });\n// //         }\n// //         try {\n// //           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //             id: messageId,\n// //             conversationId: friend.id,\n// //             sender: friend.sender,\n// //             content: decodeURIComponent(file.name),\n// //             message_type: mediaType,\n// //             timestamp: new Date().toISOString(),\n// //             recipient: friend.member,\n// //             url: filePath,\n// //           });\n// //         } catch (messageError) {\n// //           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n// //         }\n// //       }\n// //     } catch (uploadError) {\n// //       setMessages((prev) =>\n// //         prev.map((msg) => {\n// //           if (msg.id === messageId) {\n// //             return {\n// //               ...msg,\n// //               uploading: false,\n// //               error: true,\n// //               isTemporary: false,\n// //             };\n// //           }\n// //           return msg;\n// //         })\n// //       );\n// //       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n// //     }\n// //   };\n// //   if (!friend) {\n// //     return (\n// //       <div className={cx(\"chat\")}>\n// //         <div className={cx(\"empty-state\")}>\n// //           <div className={cx(\"empty-content\")}>\n// //             <div className={cx(\"empty-icon\")}>\n// //               <svg width=\"80\" height=\"80\" viewBox=\"0 0 24 24\" fill=\"none\">\n// //                 <path\n// //                   d=\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z\"\n// //                   fill=\"currentColor\"\n// //                   opacity=\"0.3\"\n// //                 />\n// //                 <circle cx=\"8\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n// //                 <circle cx=\"12\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n// //                 <circle cx=\"16\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n// //               </svg>\n// //             </div>\n// //             <div className={cx(\"empty-text\")}>\n// //               <h2>Chọn một cuộc trò chuyện</h2>\n// //               <p>Chọn một người bạn từ danh sách bên trái để bắt đầu nhắn tin</p>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n// //   return (\n// //     <div className={cx(\"chat\")}>\n// //       <ChatHeader friend={friend} onAvatarClick={handleAvatarClick} onToggleDetail={onToggleDetail} />\n// //       {showSendRequestBar ? (\n// //         <FriendRequestBar friend={friend} onSendRequest={handleSendFriendRequest} isVisible={false} />\n// //       ) : (\n// //         <FriendRequestConfirmationBar\n// //           friend={friend}\n// //           onConfirmRequest={handleConfirmFriendRequest}\n// //           onRejectRequest={handleRejectFriendRequest}\n// //           isVisible={false}\n// //         />\n// //       )}\n// //       <div className={cx(\"center\")} ref={messagesContainerRef}>\n// //         {loading ? (\n// //           <div>Đang tải...</div>\n// //         ) : error ? (\n// //           <div className={cx(\"error\")}>{error}</div>\n// //         ) : (\n// //           <>\n// //             {isLoadingMore && (\n// //               <div className={cx(\"loading-more\")}>Đang tải thêm tin nhắn...</div>\n// //             )}\n// //             {messages.map((message, index) => {\n// //               const prevMsg = messages[index - 1];\n// //               const nextMsg = messages[index + 1];\n// //               const currentTime = message.timestamp;\n// //               let showSeparator = false;\n// //               let showTime = false;\n// //               if (!prevMsg) {\n// //                 showSeparator = true;\n// //               } else {\n// //                 const diffMinutes = (currentTime - prevMsg.timestamp) / 1000 / 60;\n// //                 if (diffMinutes >= 10) {\n// //                   showSeparator = true;\n// //                 }\n// //               }\n// //               if (!nextMsg) {\n// //                 showTime = true;\n// //               } else {\n// //                 const sameMinute =\n// //                   currentTime.getHours() === nextMsg.timestamp.getHours() &&\n// //                   currentTime.getMinutes() === nextMsg.timestamp.getMinutes();\n// //                 if (!sameMinute) {\n// //                   showTime = true;\n// //                 }\n// //               }\n// //               return (\n// //                 <div key={message.id} className={cx(\"message-wrapper\", message.type)}>\n// //                   {showSeparator && (\n// //                     <div className={cx(\"time-separator\")}>\n// //                       <div className={cx(\"time-separator-content\")}>\n// //                         {formatSeparator(message.timestamp)}\n// //                       </div>\n// //                     </div>\n// //                   )}\n// //                   <div className={cx(\"message\", message.type)}>\n// //                     <div\n// //                       className={cx(\"message-bubble\", {\n// //                         \"has-media\": message.temporaryImage || message.image || message.temporaryVideo || message.video || message.file,\n// //                         temporary: message.isTemporary,\n// //                         uploading: message.uploading,\n// //                       })}\n// //                     >\n// //                       {renderMessageContent(message)}\n// //                     </div>\n// //                     {showTime && (\n// //                       <div className={cx(\"message-time\")}>{formatTime(message.timestamp)}</div>\n// //                     )}\n// //                   </div>\n// //                 </div>\n// //               );\n// //             })}\n// //           </>\n// //         )}\n// //       </div>\n// //       <div className={cx(\"cr\")}>\n// //         <label className={cx(\"cr-button\")} title=\"Chọn ảnh\" aria-label=\"Chọn ảnh để gửi\">\n// //           <input\n// //             type=\"file\"\n// //             accept=\"image/*\"\n// //             style={{ display: \"none\" }}\n// //             onChange={(e) => handleMediaSelect(e, \"image\")}\n// //           />\n// //           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //             <path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\" />\n// //           </svg>\n// //         </label>\n// //         <label className={cx(\"cr-button\")} title=\"Chọn tệp\" aria-label=\"Chọn tệp để gửi\">\n// //           <input\n// //             type=\"file\"\n// //             accept=\".pdf,.doc,.docx,.txt,.zip,.rar,.xlsx,.xls,.ppt,.pptx\"\n// //             style={{ display: \"none\" }}\n// //             onChange={(e) => handleMediaSelect(e, \"file\")}\n// //           />\n// //           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //             <path d=\"M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z\" />\n// //           </svg>\n// //         </label>\n// //         <label className={cx(\"cr-button\")} title=\"Chọn video\" aria-label=\"Chọn video để gửi\">\n// //           <input\n// //             type=\"file\"\n// //             accept=\"video/*\"\n// //             style={{ display: \"none\" }}\n// //             onChange={(e) => handleMediaSelect(e, \"video\")}\n// //           />\n// //           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //             <path d=\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z\" />\n// //           </svg>\n// //         </label>\n// //       </div>\n// //       <div className={cx(\"input-area\")}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Nhập tin nhắn...\"\n// //           value={text}\n// //           onChange={(e) => setText(e.target.value)}\n// //           onKeyPress={handleKeyPress}\n// //           className={cx(\"message-input\")}\n// //           aria-label=\"Nhập tin nhắn\"\n// //         />\n// //         <div className={cx(\"emoji-container\")}>\n// //           <button\n// //             className={cx(\"emoji-button\")}\n// //             onClick={() => setOpen((prev) => !prev)}\n// //             aria-label=\"Mở bảng chọn biểu tượng cảm xúc\"\n// //           >\n// //             😊\n// //           </button>\n// //           <div className={cx(\"emoji-picker\")} style={{ display: open ? \"block\" : \"none\" }}>\n// //             {emojis.map((emoji, index) => (\n// //               <button\n// //                 key={index}\n// //                 onClick={() => handleEmoji(emoji)}\n// //                 className={cx(\"emoji-item\")}\n// //                 aria-label={`Chọn biểu tượng ${emoji}`}\n// //               >\n// //                 {emoji}\n// //               </button>\n// //             ))}\n// //           </div>\n// //         </div>\n// //         <button\n// //           onClick={handleSend}\n// //           className={cx(\"send-button\", { active: text.trim() })}\n// //           aria-label={text.trim() ? \"Gửi tin nhắn\" : \"Gửi like\"}\n// //         >\n// //           {text.trim() ? (\n// //             <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //               <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\n// //             </svg>\n// //           ) : (\n// //             <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //               <path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\" />\n// //             </svg>\n// //           )}\n// //         </button>\n// //       </div>\n// //       {open && <div className={cx(\"overlay\")} onClick={() => setOpen(false)} />}\n// //       {showProfile && <ProFile1 onClose={() => setShowProFile(false)} datax={friend} />}\n// //       {previewImage && <ChatPreview imageUrl={previewImage} onClose={handleClosePreview} />}\n// //     </div>\n// //   );\n// // }\n// // export default Chat;\nimport classNames from\"classnames/bind\";import styles from\"./Chat.module.scss\";import{useState,useEffect,useRef,useCallback}from\"react\";import ProFile1 from\"../../pages/ProFile1\";import ChatPreview from\"./ChatPreview\";import EmptyState from\"./EmptyState/EmptyState\";import MediaUploadBar from\"./MediaUploadBar/MediaUploadBar\";import MessageList from\"./MessageList/MessageList\";import useSocketHandler from\"./SocketHandler/useSocketHander\";import useMessagesHandler from\"./MessageHandler/useMessageHandler\";import useChatActions from\"./ChatAction/useChatActions\";import FriendRequestBar from\"./FriendRequestBar\";import FriendRequestConfirmationBar from\"./FriendRequestConfirmationBar\";import ChatInput from\"./ChatInput/ChatInput\";import ChatHeader from\"./ChatHeader\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const cx=classNames.bind(styles);function Chat(_ref){let{friend,onToggleDetail,onUpdateChat}=_ref;const{messages,setMessages,loading,isLoadingMore,hasMore,error,loadMoreMessages}=useMessagesHandler(friend);const{socketRef}=useSocketHandler(friend,onUpdateChat,setMessages);const{handleSend,handleMediaSelect}=useChatActions(friend,onUpdateChat,setMessages,socketRef);const[showProfile,setShowProFile]=useState(false);const[previewImage,setPreviewImage]=useState(null);const[showSendRequestBar,setShowSendRequestBar]=useState(true);// Các hàm callback và logic khác giữ nguyên, chỉ sửa phần liên quan đến emoji\nconst handleAvatarClick=useCallback(()=>{setShowProFile(true);},[]);const handleSendFriendRequest=useCallback((friendId,friendName)=>{console.log(\"G\\u1EEDi l\\u1EDDi m\\u1EDDi k\\u1EBFt b\\u1EA1n t\\u1EDBi ID \".concat(friendId,\": \").concat(friendName));},[]);const handleConfirmFriendRequest=useCallback((friendId,friendName)=>{console.log(\"X\\xE1c nh\\u1EADn l\\u1EDDi m\\u1EDDi k\\u1EBFt b\\u1EA1n t\\u1EEB ID \".concat(friendId,\": \").concat(friendName));},[]);const handleRejectFriendRequest=useCallback((friendId,friendName)=>{console.log(\"T\\u1EEB ch\\u1ED1i l\\u1EDDi m\\u1EDDi k\\u1EBFt b\\u1EA1n t\\u1EEB ID \".concat(friendId,\": \").concat(friendName));},[]);const handleClosePreview=useCallback(()=>{setPreviewImage(null);},[]);const toggleRequestBar=useCallback(()=>{setShowSendRequestBar(prev=>!prev);},[]);if(!friend)return/*#__PURE__*/_jsx(EmptyState,{});return/*#__PURE__*/_jsxs(\"div\",{className:cx(\"chat\"),children:[/*#__PURE__*/_jsx(ChatHeader,{friend:friend,onAvatarClick:handleAvatarClick,onToggleDetail:onToggleDetail}),showSendRequestBar?/*#__PURE__*/_jsx(FriendRequestBar,{friend:friend,onSendRequest:handleSendFriendRequest,isVisible:false}):/*#__PURE__*/_jsx(FriendRequestConfirmationBar,{friend:friend,onConfirmRequest:handleConfirmFriendRequest,onRejectRequest:handleRejectFriendRequest,isVisible:false}),/*#__PURE__*/_jsx(MessageList,{messages:messages,loading:loading,error:error,isLoadingMore:isLoadingMore,hasMore:hasMore,onLoadMore:loadMoreMessages,onImagePreview:setPreviewImage}),/*#__PURE__*/_jsx(MediaUploadBar,{onMediaSelect:handleMediaSelect}),/*#__PURE__*/_jsx(ChatInput,{onSend:handleSend}),showProfile&&/*#__PURE__*/_jsx(ProFile1,{onClose:()=>setShowProFile(false),datax:friend}),previewImage&&/*#__PURE__*/_jsx(ChatPreview,{imageUrl:previewImage,onClose:handleClosePreview})]});}export default Chat;","map":{"version":3,"names":["classNames","styles","useState","useEffect","useRef","useCallback","ProFile1","ChatPreview","EmptyState","MediaUploadBar","MessageList","useSocketHandler","useMessagesHandler","useChatActions","FriendRequestBar","FriendRequestConfirmationBar","ChatInput","ChatHeader","jsx","_jsx","jsxs","_jsxs","cx","bind","Chat","_ref","friend","onToggleDetail","onUpdateChat","messages","setMessages","loading","isLoadingMore","hasMore","error","loadMoreMessages","socketRef","handleSend","handleMediaSelect","showProfile","setShowProFile","previewImage","setPreviewImage","showSendRequestBar","setShowSendRequestBar","handleAvatarClick","handleSendFriendRequest","friendId","friendName","console","log","concat","handleConfirmFriendRequest","handleRejectFriendRequest","handleClosePreview","toggleRequestBar","prev","className","children","onAvatarClick","onSendRequest","isVisible","onConfirmRequest","onRejectRequest","onLoadMore","onImagePreview","onMediaSelect","onSend","onClose","datax","imageUrl"],"sources":["/home/ichigomazone/Vscode/ReactJs/new-ui/frontend/src/components/Chat/index.js"],"sourcesContent":["\n\n// // import classNames from \"classnames/bind\";\n// // import styles from \"./Chat.module.scss\";\n// // import { useState, useEffect, useRef, useCallback } from \"react\";\n// // import ProFile1 from \"~/pages/ProFile1\";\n// // import ChatPreview from \"./ChatPreview\";\n// // import FriendRequestBar from \"./FriendRequestBar\";\n// // import FriendRequestConfirmationBar from \"./FriendRequestConfirmationBar\";\n// // import ChatHeader from \"./ChatHeader\";\n// // import { FileText } from \"lucide-react\";\n// // import axios from \"axios\";\n// // import { io } from \"socket.io-client\";\n\n// // const cx = classNames.bind(styles);\n\n// // function Chat({ friend, onToggleDetail, onUpdateChat }) {\n// //   const [open, setOpen] = useState(false);\n// //   const [text, setText] = useState(\"\");\n// //   const [showProfile, setShowProFile] = useState(false);\n// //   const [previewImage, setPreviewImage] = useState(null);\n// //   const messagesContainerRef = useRef(null);\n// //   const [messages, setMessages] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isLoadingMore, setIsLoadingMore] = useState(false);\n// //   const [hasMore, setHasMore] = useState(true);\n// //   const [error, setError] = useState(null);\n// //   const [showSendRequestBar, setShowSendRequestBar] = useState(false);\n// //   const socketRef = useRef(null);\n\n// //   const handleAvatarClick = useCallback(() => {\n// //     setShowProFile(true);\n// //   }, []);\n\n// //   const handleSendFriendRequest = useCallback((friendId, friendName) => {\n// //     console.log(`Gửi lời mời kết bạn tới ID ${friendId}: ${friendName}`);\n// //   }, []);\n\n// //   const handleConfirmFriendRequest = useCallback((friendId, friendName) => {\n// //     console.log(`Xác nhận lời mời kết bạn từ ID ${friendId}: ${friendName}`);\n// //   }, []);\n\n// //   const handleRejectFriendRequest = useCallback((friendId, friendName) => {\n// //     console.log(`Từ chối lời mời kết bạn từ ID ${friendId}: ${friendName}`);\n// //   }, []);\n\n// //   const handleClosePreview = useCallback(() => {\n// //     setPreviewImage(null);\n// //   }, []);\n\n// //   const formatTime = (dateObj) => {\n// //     return dateObj.toLocaleTimeString(\"vi-VN\", {\n// //       hour: \"2-digit\",\n// //       minute: \"2-digit\",\n// //       hour12: true,\n// //     });\n// //   };\n\n// //   const formatSeparator = (dateObj) => {\n// //     return (\n// //       dateObj.toLocaleDateString(\"vi-VN\", { day: \"2-digit\", month: \"2-digit\", year: \"numeric\" }) +\n// //       \" \" +\n// //       formatTime(dateObj)\n// //     );\n// //   };\n\n// //   const isValidUrl = (url) => {\n// //     try {\n// //       new URL(url);\n// //       return true;\n// //     } catch {\n// //       return false;\n// //     }\n// //   };\n\n// //   const renderMessageContent = (message) => {\n// //     if (message.uploading) {\n// //       return (\n// //         <div className={cx(\"message-uploading\")}>\n// //           <span>Đang tải {message.fileName}...</span>\n// //           <div className={cx(\"uploading-progress\")}>\n// //             <div className={cx(\"progress-bar\")}></div>\n// //           </div>\n// //         </div>\n// //       );\n// //     }\n\n// //     if (message.error) {\n// //       return (\n// //         <div className={cx(\"message-error\")}>\n// //           <span>Lỗi tải {message.fileName}</span>\n// //         </div>\n// //       );\n// //     }\n\n// //     if (message.temporaryImage || message.image) {\n// //       const imageSource = message.temporaryImage || message.image;\n// //       const isBase64 = imageSource && imageSource.startsWith(\"data:image/\");\n\n// //       return (\n// //         <div\n// //           className={cx(\"message-image\", { temporary: message.isTemporary })}\n// //           onClick={() => setPreviewImage(imageSource)}\n// //           aria-label=\"Xem trước hình ảnh\"\n// //         >\n// //           <img\n// //             src={\n// //               isBase64\n// //                 ? imageSource\n// //                 : imageSource && imageSource.startsWith(\"http\")\n// //                 ? imageSource\n// //                 : `http://localhost:5000${imageSource}`\n// //             }\n// //             alt={message.fileName || \"Hình ảnh được chia sẻ\"}\n// //             className={cx(\"image-content\")}\n// //             onError={(e) => {\n// //               console.error(\"Lỗi tải hình ảnh:\", e.target.src);\n// //               e.target.parentElement.style.display = \"none\";\n// //             }}\n// //           />\n// //           {message.uploading && (\n// //             <div className={cx(\"uploading-indicator\")}>\n// //               Đang tải...\n// //             </div>\n// //           )}\n// //         </div>\n// //       );\n// //     }\n\n// //     if (message.temporaryVideo || message.video) {\n// //       const videoSource = message.temporaryVideo || message.video;\n// //       const isBase64 = videoSource && videoSource.startsWith(\"data:video/\");\n\n// //       return (\n// //         <div className={cx(\"message-video\", { temporary: message.isTemporary })}>\n// //           <video controls className={cx(\"video-content\")}>\n// //             <source\n// //               src={\n// //                 isBase64\n// //                   ? videoSource\n// //                   : videoSource && videoSource.startsWith(\"http\")\n// //                   ? videoSource\n// //                   : `http://localhost:5000${videoSource}`\n// //               }\n// //               type=\"video/mp4\"\n// //             />\n// //             Trình duyệt của bạn không hỗ trợ thẻ video.\n// //           </video>\n// //           {message.uploading && (\n// //             <div className={cx(\"uploading-indicator\")}>\n// //               Đang tải...\n// //             </div>\n// //           )}\n// //         </div>\n// //       );\n// //     }\n\n// //     if (message.file) {\n// //       const handleDownload = async (url, filename, e) => {\n// //         e.preventDefault();\n// //         e.stopPropagation();\n\n// //         try {\n// //           const response = await fetch(url);\n// //           const blob = await response.blob();\n// //           const link = document.createElement(\"a\");\n// //           link.href = window.URL.createObjectURL(blob);\n// //           link.download = filename;\n// //           link.click();\n// //           window.URL.revokeObjectURL(link.href);\n// //         } catch (error) {\n// //           console.error(\"Tải xuống thất bại:\", error);\n// //         }\n// //       };\n\n// //       const fileUrl = message.file.url.startsWith(\"http\")\n// //         ? message.file.url\n// //         : `http://localhost:5000${message.file.url}`;\n\n// //       return (\n// //         <div className={cx(\"message-file\")}>\n// //           <div className={cx(\"file-container\")}>\n// //             <div className={cx(\"file-icon\")}>\n// //               <FileText size={20} />\n// //             </div>\n// //             <div className={cx(\"file-info\")}>\n// //               <div className={cx(\"file-name\")}>{message.file.name}</div>\n// //               {message.file.url && (\n// //                 <a\n// //                   href={fileUrl}\n// //                   className={cx(\"download-link\")}\n// //                   onClick={(e) => handleDownload(fileUrl, message.file.name, e)}\n// //                 >\n// //                   Tải xuống\n// //                 </a>\n// //               )}\n// //             </div>\n// //           </div>\n// //         </div>\n// //       );\n// //     }\n\n// //     if (typeof message.text === \"string\" && message.text) {\n// //       const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n// //       const parts = message.text.split(urlRegex);\n// //       return (\n// //         <span>\n// //           {parts.map((part, index) => {\n// //             if (part.match(urlRegex) && isValidUrl(part)) {\n// //               return (\n// //                 <a\n// //                   key={index}\n// //                   href={part}\n// //                   target=\"_blank\"\n// //                   rel=\"noopener noreferrer\"\n// //                   className={cx(\"message-link\")}\n// //                 >\n// //                   {part}\n// //                 </a>\n// //               );\n// //             }\n// //             return part;\n// //           })}\n// //         </span>\n// //       );\n// //     }\n// //     return <span>{message.text || \"\"}</span>;\n// //   };\n\n// //   const scrollToBottom = useCallback(() => {\n// //     if (messagesContainerRef.current) {\n// //       messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n// //     }\n// //   }, []);\n\n// //   useEffect(() => {\n// //     if (messages.length > 0) {\n// //       const lastMessage = messages[messages.length - 1];\n// //       const previousLastMessageId = localStorage.getItem('lastMessageId');\n// //       if (!previousLastMessageId || previousLastMessageId !== lastMessage.id.toString()) {\n// //         scrollToBottom();\n// //         localStorage.setItem('lastMessageId', lastMessage.id.toString());\n// //       }\n// //     }\n// //   }, [messages.length, scrollToBottom]);\n\n// //   // Socket connection - sửa đổi để luôn lắng nghe tất cả tin nhắn\n// //   useEffect(() => {\n// //     if (!friend?.sender) return; // Sử dụng friend.sender như code gốc\n\n// //     // Kết nối socket với userId của người dùng hiện tại\n// //     socketRef.current = io(\"http://localhost:5000\", {\n// //       query: { userId: friend.sender },\n// //     });\n\n// //     // Lắng nghe tin nhắn từ tất cả cuộc trò chuyện\n// //     socketRef.current.on(\"receiveMessage\", (data) => {\n// //       console.log(\"Nhận tin nhắn qua Socket.IO:\", data);\n      \n// //       const receivedMessage = {\n// //         id: data.message.id || Date.now() + Math.random(),\n// //         text: data.message.message_type === \"text\" && typeof data.message.content === \"string\" ? data.message.content : \"\",\n// //         type: data.message.sender === friend.sender ? \"sent\" : \"received\",\n// //         timestamp: new Date(data.message.timestamp),\n// //         temporaryImage: data.message.message_type === \"image\" && data.message.base64Data ? data.message.base64Data : null,\n// //         image: data.message.message_type === \"image\" && data.message.url ? `http://localhost:5000${data.message.url}` : null,\n// //         temporaryVideo: data.message.message_type === \"video\" && data.message.base64Data ? data.message.base64Data : null,\n// //         video: data.message.message_type === \"video\" && data.message.url ? `http://localhost:5000${data.message.url}` : null,\n// //         file: data.message.message_type === \"file\" ? {\n// //           name: data.message.content,\n// //           url: data.message.url ? `http://localhost:5000${data.message.url}` : null,\n// //         } : null,\n// //         isTemporary: data.message.message_type === \"file\" ? false : !!data.message.base64Data,\n// //       };\n\n// //       // Nếu tin nhắn thuộc về cuộc trò chuyện hiện tại, thêm vào messages\n// //       if (data.message.conversation_id === friend.id) {\n// //         setMessages((prev) => {\n// //           const existingMessageIndex = prev.findIndex((msg) => msg.id === receivedMessage.id);\n// //           if (existingMessageIndex !== -1) {\n// //             const updatedMessages = [...prev];\n// //             updatedMessages[existingMessageIndex] = {\n// //               ...updatedMessages[existingMessageIndex],\n// //               temporaryImage: receivedMessage.temporaryImage || updatedMessages[existingMessageIndex].temporaryImage,\n// //               image: receivedMessage.image || updatedMessages[existingMessageIndex].image,\n// //               temporaryVideo: receivedMessage.temporaryVideo || updatedMessages[existingMessageIndex].temporaryVideo,\n// //               video: receivedMessage.video || updatedMessages[existingMessageIndex].video,\n// //               file: receivedMessage.file || updatedMessages[existingMessageIndex].file,\n// //               isTemporary: data.message.message_type === \"file\" ? false : false,\n// //             };\n// //             return updatedMessages;\n// //           }\n// //           if (!prev.length || receivedMessage.timestamp > prev[prev.length - 1].timestamp) {\n// //             return [...prev, receivedMessage];\n// //           }\n// //           return prev;\n// //         });\n// //       }\n\n// //       // Luôn cập nhật chat list cho tất cả tin nhắn (không phụ thuộc vào cuộc trò chuyện hiện tại)\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ receiveMessage (global):\", data.message.conversation_id, {\n// //           content: receivedMessage.text || receivedMessage.file?.name || \"Media\",\n// //           sender: data.message.sender,\n// //           timestamp: data.message.timestamp,\n// //           message_type: data.message.message_type,\n// //         });\n// //         onUpdateChat(data.message.conversation_id, {\n// //           content: receivedMessage.text || receivedMessage.file?.name || \"Media\",\n// //           sender: data.message.sender,\n// //           timestamp: data.message.timestamp,\n// //           message_type: data.message.message_type,\n// //         });\n// //       }\n// //     });\n\n// //     socketRef.current.on(\"updateMessage\", (data) => {\n// //       console.log(\"Cập nhật tin nhắn qua Socket.IO:\", data);\n      \n// //       // Chỉ cập nhật tin nhắn nếu đang trong cuộc trò chuyện đó\n// //       if (data.message.conversation_id === friend.id) {\n// //         setMessages((prev) =>\n// //           prev.map((msg) => {\n// //             if (msg.id === data.message.id) {\n// //               return {\n// //                 ...msg,\n// //                 image: data.message.url && data.message.message_type === \"image\" ? `http://localhost:5000${data.message.url}` : msg.image,\n// //                 video: data.message.url && data.message.message_type === \"video\" ? `http://localhost:5000${data.message.url}` : msg.video,\n// //                 file: data.message.url && data.message.message_type === \"file\" ? {\n// //                   name: msg.file?.name || data.message.content,\n// //                   url: `http://localhost:5000${data.message.url}`,\n// //                 } : msg.file,\n// //                 isTemporary: false,\n// //                 uploading: false,\n// //               };\n// //             }\n// //             return msg;\n// //           })\n// //         );\n        \n// //         // Cập nhật chat list khi có update message\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ updateMessage:\", friend.id, {\n// //             content: data.message.content || \"Media\",\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: data.message.message_type,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: data.message.content || \"Media\",\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: data.message.message_type,\n// //           });\n// //         }\n// //       }\n// //     });\n\n// //     return () => {\n// //       if (socketRef.current) {\n// //         socketRef.current.disconnect();\n// //         console.log(\"Ngắt kết nối Socket.IO trong Chat\");\n// //       }\n// //     };\n// //   }, [friend, onUpdateChat]); // Giữ nguyên dependencies như code gốc\n\n// //   // Join/leave chat room khi chuyển cuộc trò chuyện\n// //   useEffect(() => {\n// //     if (socketRef.current && friend?.id) {\n// //       socketRef.current.emit(\"joinChat\", friend.id);\n// //       console.log(\"Join chat room:\", friend.id);\n      \n// //       return () => {\n// //         if (socketRef.current && friend?.id) {\n// //           socketRef.current.emit(\"leaveChat\", friend.id);\n// //           console.log(\"Leave chat room:\", friend.id);\n// //         }\n// //       };\n// //     }\n// //   }, [friend?.id]);\n\n// //   const fetchMessages = useCallback(async (before = null) => {\n// //     if (!friend || !friend.id || !friend.sender) {\n// //       setMessages([]);\n// //       setLoading(false);\n// //       setHasMore(false);\n// //       return;\n// //     }\n\n// //     try {\n// //       const payload = {\n// //         friendId: friend.id,\n// //         limit: 50,\n// //       };\n// //       if (before) {\n// //         payload.before = before;\n// //       }\n\n// //       const response = await axios.post(\"http://localhost:5000/api/chat/messages/\", payload);\n\n// //       if (response.status === 200 && Array.isArray(response.data)) {\n// //         const transformedMessages = response.data\n// //           .map((msg) => ({\n// //             id: msg.id,\n// //             text: msg.message_type === \"text\" && typeof msg.content === \"string\" ? msg.content : \"\",\n// //             type: msg.sender === friend.sender ? \"sent\" : \"received\",\n// //             timestamp: new Date(msg.timestamp),\n// //             image: msg.message_type === \"image\" ? `http://localhost:5000${msg.url}` : null,\n// //             video: msg.message_type === \"video\" ? `http://localhost:5000${msg.url}` : null,\n// //             file: msg.message_type === \"file\" ? { name: msg.content, url: `http://localhost:5000${msg.url}` } : null,\n// //             isTemporary: false,\n// //           }))\n// //           .filter((msg) => msg.text || msg.image || msg.video || msg.file);\n\n// //         setMessages((prev) => {\n// //           if (before) {\n// //             return [...transformedMessages, ...prev].filter((msg, index, self) =>\n// //               index === self.findIndex((m) => m.id === msg.id)\n// //             );\n// //           } else {\n// //             localStorage.removeItem('lastMessageId');\n// //             return transformedMessages;\n// //           }\n// //         });\n\n// //         setHasMore(transformedMessages.length === 50);\n// //       } else {\n// //         setError(\"Dữ liệu tin nhắn không hợp lệ.\");\n// //         setHasMore(false);\n// //       }\n// //     } catch (err) {\n// //       setError(\"Lỗi khi tải tin nhắn: \" + err.message);\n// //       console.error(\"Lỗi khi lấy tin nhắn:\", err);\n// //       setHasMore(false);\n// //     } finally {\n// //       setLoading(false);\n// //       setIsLoadingMore(false);\n// //     }\n// //   }, [friend]);\n\n// //   useEffect(() => {\n// //     setLoading(true);\n// //     setIsLoadingMore(false);\n// //     setHasMore(true);\n// //     setError(null);\n// //     setMessages([]);\n// //     fetchMessages(null);\n// //   }, [friend, fetchMessages]);\n\n// //   const loadMoreMessages = useCallback(() => {\n// //     if (messages.length === 0) return;\n// //     const firstMessage = messages[0];\n// //     const before = firstMessage.timestamp.toISOString();\n// //     fetchMessages(before);\n// //   }, [messages, fetchMessages]);\n\n// //   const handleScroll = useCallback(() => {\n// //     const container = messagesContainerRef.current;\n// //     if (!container) return;\n// //     if (container.scrollTop <= 100 && hasMore && !isLoadingMore && !loading) {\n// //       setIsLoadingMore(true);\n// //       loadMoreMessages();\n// //     }\n// //   }, [hasMore, isLoadingMore, loading, loadMoreMessages]);\n\n// //   useEffect(() => {\n// //     const container = messagesContainerRef.current;\n// //     if (container) {\n// //       container.addEventListener(\"scroll\", handleScroll);\n// //       return () => container.removeEventListener(\"scroll\", handleScroll);\n// //     }\n// //   }, [handleScroll]);\n\n// //   const toggleRequestBar = useCallback(() => {\n// //     setShowSendRequestBar((prev) => !prev);\n// //   }, []);\n\n// //   const emojis = [\"😀\", \"😂\", \"😍\", \"😊\", \"😎\", \"🤔\", \"👍\", \"❤️\", \"🎉\", \"🔥\", \"💯\", \"✨\"];\n\n// //   const handleEmoji = useCallback((emoji) => {\n// //     setText((prev) => prev + emoji);\n// //     setOpen(false);\n// //   }, []);\n\n// //   const handleSend = useCallback(async () => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n\n// //     if (text.trim()) {\n// //       const newMessage = {\n// //         id: Date.now(),\n// //         text: text.trim(),\n// //         type: \"sent\",\n// //         timestamp: new Date(),\n// //         isTemporary: false,\n// //       };\n// //       setMessages((prev) => [...prev, newMessage]);\n// //       setText(\"\");\n\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ handleSend:\", friend.id, {\n// //           content: newMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: newMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //         onUpdateChat(friend.id, {\n// //           content: newMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: newMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //       }\n\n// //       if (socketRef.current) {\n// //         socketRef.current.emit(\"sendMessage\", {\n// //           toUserId: friend.member,\n// //           message: {\n// //             id: newMessage.id,\n// //             conversation_id: friend.id,\n// //             sender: friend.sender,\n// //             recipient: friend.member,\n// //             content: newMessage.text,\n// //             message_type: \"text\",\n// //             timestamp: newMessage.timestamp.toISOString(),\n// //             url: null,\n// //           },\n// //         });\n// //       }\n\n// //       try {\n// //         await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //           id: newMessage.id,\n// //           conversationId: friend.id,\n// //           sender: friend.sender,\n// //           content: text.trim(),\n// //           message_type: \"text\",\n// //           timestamp: new Date().toISOString(),\n// //           recipient: friend.member,\n// //         });\n// //       } catch (error) {\n// //         console.error(\"Lỗi gửi tin nhắn:\", error);\n// //       }\n// //     } else {\n// //       const likeMessage = {\n// //         id: Date.now(),\n// //         text: \"👍\",\n// //         type: \"sent\",\n// //         timestamp: new Date(),\n// //         isTemporary: false,\n// //       };\n// //       setMessages((prev) => [...prev, likeMessage]);\n\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ handleSend (like):\", friend.id, {\n// //           content: likeMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: likeMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //         onUpdateChat(friend.id, {\n// //           content: likeMessage.text,\n// //           sender: friend.sender,\n// //           timestamp: likeMessage.timestamp.toISOString(),\n// //           message_type: \"text\",\n// //         });\n// //       }\n\n// //       if (socketRef.current) {\n// //         socketRef.current.emit(\"sendMessage\", {\n// //           toUserId: friend.member,\n// //           message: {\n// //             id: likeMessage.id,\n// //             conversation_id: friend.id,\n// //             sender: friend.sender,\n// //             recipient: friend.member,\n// //             content: \"👍\",\n// //             message_type: \"text\",\n// //             timestamp: likeMessage.timestamp.toISOString(),\n// //             url: null,\n// //           },\n// //         });\n// //       }\n\n// //       try {\n// //         await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //           id: likeMessage.id,\n// //           conversationId: friend.id,\n// //           sender: friend.sender,\n// //           content: \"👍\",\n// //           message_type: \"text\",\n// //           timestamp: new Date().toISOString(),\n// //           recipient: friend.member,\n// //         });\n// //       } catch (error) {\n// //         console.error(\"Lỗi gửi tin nhắn like:\", error);\n// //       }\n// //     }\n// //   }, [text, friend, onUpdateChat]);\n\n// //   const handleKeyPress = useCallback((e) => {\n// //     if (e.key === \"Enter\") {\n// //       handleSend();\n// //     }\n// //   }, [handleSend]);\n\n// //   const handleMediaSelect = useCallback(async (e, mediaType) => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n\n// //     const file = e.target.files[0];\n// //     if (!file) {\n// //       alert(\"Vui lòng chọn một tệp.\");\n// //       return;\n// //     }\n\n// //     if (file.size > 50 * 1024 * 1024) {\n// //       alert(\"Tệp quá lớn. Kích thước tối đa là 50MB.\");\n// //       return;\n// //     }\n\n// //     if (mediaType === \"image\" && !file.type.startsWith(\"image/\")) {\n// //       alert(\"Vui lòng chọn tệp hình ảnh.\");\n// //       return;\n// //     }\n\n// //     if (mediaType === \"video\" && !file.type.startsWith(\"video/\")) {\n// //       alert(\"Vui lòng chọn tệp video.\");\n// //       return;\n// //     }\n\n// //     const tempMessageId = Date.now() + Math.random();\n\n// //     if (mediaType === \"file\") {\n// //       await uploadFileDirectly(file, mediaType, tempMessageId);\n// //     } else {\n// //       const reader = new FileReader();\n// //       reader.onload = () => {\n// //         const tempMessage = {\n// //           id: tempMessageId,\n// //           type: \"sent\",\n// //           timestamp: new Date(),\n// //           uploading: true,\n// //           fileName: file.name,\n// //           isTemporary: true,\n// //         };\n\n// //         let base64Data = null;\n// //         if (mediaType === \"image\") {\n// //           tempMessage.temporaryImage = reader.result;\n// //           base64Data = reader.result;\n// //         } else if (mediaType === \"video\") {\n// //           tempMessage.temporaryVideo = reader.result;\n// //           base64Data = reader.result;\n// //         }\n\n// //         setMessages((prev) => [...prev, tempMessage]);\n// //         scrollToBottom();\n\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ handleMediaSelect:\", friend.id, {\n// //             content: file.name,\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: file.name,\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //         }\n\n// //         if (socketRef.current) {\n// //           socketRef.current.emit(\"sendMessage\", {\n// //             toUserId: friend.member,\n// //             message: {\n// //               id: tempMessageId,\n// //               conversation_id: friend.id,\n// //               sender: friend.sender,\n// //               recipient: friend.member,\n// //               content: file.name,\n// //               message_type: mediaType,\n// //               timestamp: new Date().toISOString(),\n// //               url: null,\n// //               base64Data: base64Data,\n// //             },\n// //           });\n// //         }\n\n// //         uploadFileToServer(file, mediaType, tempMessageId, base64Data);\n// //       };\n\n// //       reader.onerror = () => {\n// //         alert(\"Lỗi khi đọc tệp.\");\n// //       };\n// //       reader.readAsDataURL(file);\n// //     }\n// //   }, [friend, scrollToBottom, onUpdateChat]);\n\n// //   const uploadFileDirectly = async (file, mediaType, messageId) => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n\n// //     const formData = new FormData();\n// //     formData.append(\"file\", file, encodeURIComponent(file.name));\n\n// //     try {\n// //       const uploadingMessage = {\n// //         id: messageId,\n// //         type: \"sent\",\n// //         timestamp: new Date(),\n// //         uploading: true,\n// //         fileName: file.name,\n// //         isTemporary: false,\n// //       };\n// //       setMessages((prev) => [...prev, uploadingMessage]);\n// //       scrollToBottom();\n\n// //       if (onUpdateChat) {\n// //         console.log(\"Gọi onUpdateChat từ uploadFileDirectly:\", friend.id, {\n// //           content: decodeURIComponent(file.name),\n// //           sender: friend.sender,\n// //           timestamp: new Date().toISOString(),\n// //           message_type: mediaType,\n// //         });\n// //         onUpdateChat(friend.id, {\n// //           content: decodeURIComponent(file.name),\n// //           sender: friend.sender,\n// //           timestamp: new Date().toISOString(),\n// //           message_type: mediaType,\n// //         });\n// //       }\n\n// //       const uploadResponse = await axios.post(`http://localhost:5000/upload-file`, formData, {\n// //         headers: {\n// //           \"Content-Type\": \"multipart/form-data\",\n// //           \"Accept\": \"application/json\",\n// //         },\n// //       });\n\n// //       if (uploadResponse.data.url) {\n// //         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n// //         const fullUrl = uploadResponse.data.url;\n\n// //         const fileMessage = {\n// //           id: messageId,\n// //           type: \"sent\",\n// //           timestamp: new Date(),\n// //           uploading: false,\n// //           fileName: file.name,\n// //           file: {\n// //             name: decodeURIComponent(file.name),\n// //             url: fullUrl,\n// //           },\n// //           isTemporary: false,\n// //         };\n\n// //         setMessages((prev) =>\n// //           prev.map((msg) => {\n// //             if (msg.id === messageId) {\n// //               return fileMessage;\n// //             }\n// //             return msg;\n// //           })\n// //         );\n\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ uploadFileDirectly (success):\", friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //         }\n\n// //         if (socketRef.current) {\n// //           socketRef.current.emit(\"sendMessage\", {\n// //             toUserId: friend.member,\n// //             message: {\n// //               id: messageId,\n// //               conversation_id: friend.id,\n// //               sender: friend.sender,\n// //               recipient: friend.member,\n// //               content: decodeURIComponent(file.name),\n// //               message_type: mediaType,\n// //               timestamp: new Date().toISOString(),\n// //               url: filePath,\n// //             },\n// //           });\n// //         }\n\n// //         try {\n// //           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //             id: messageId,\n// //             conversationId: friend.id,\n// //             sender: friend.sender,\n// //             content: decodeURIComponent(file.name),\n// //             message_type: mediaType,\n// //             timestamp: new Date().toISOString(),\n// //             recipient: friend.member,\n// //             url: filePath,\n// //           });\n// //         } catch (messageError) {\n// //           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n// //         }\n// //       }\n// //     } catch (uploadError) {\n// //       setMessages((prev) =>\n// //         prev.map((msg) => {\n// //           if (msg.id === messageId) {\n// //             return {\n// //               ...msg,\n// //               uploading: false,\n// //               error: true,\n// //               isTemporary: false,\n// //             };\n// //           }\n// //           return msg;\n// //         })\n// //       );\n// //       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n// //     }\n// //   };\n\n// //   const uploadFileToServer = async (file, mediaType, messageId, base64Data = null) => {\n// //     if (!friend || !friend.id || !friend.sender) return;\n\n// //     const formData = new FormData();\n// //     let endpoint;\n\n// //     if (mediaType === \"image\") {\n// //       formData.append(\"file\", file, encodeURIComponent(file.name));\n// //       endpoint = \"/upload-file\";\n// //     } else if (mediaType === \"video\") {\n// //       formData.append(\"video\", file, encodeURIComponent(file.name));\n// //       endpoint = \"/upload-video\";\n// //     }\n\n// //     try {\n// //       const uploadResponse = await axios.post(`http://localhost:5000${endpoint}`, formData, {\n// //         headers: {\n// //           \"Content-Type\": \"multipart/form-data\",\n// //           \"Accept\": \"application/json\",\n// //         },\n// //       });\n\n// //       if (uploadResponse.data.url) {\n// //         const filePath = uploadResponse.data.url.replace(\"http://localhost:5000\", \"\");\n// //         const fullUrl = uploadResponse.data.url;\n\n// //         setMessages((prev) =>\n// //           prev.map((msg) => {\n// //             if (msg.id === messageId) {\n// //               const updatedMsg = {\n// //                 ...msg,\n// //                 uploading: false,\n// //                 isTemporary: false,\n// //                 image: mediaType === \"image\" ? fullUrl : msg.image,\n// //                 video: mediaType === \"video\" ? fullUrl : msg.video,\n// //               };\n// //               return updatedMsg;\n// //             }\n// //             return msg;\n// //           })\n// //         );\n\n// //         if (onUpdateChat) {\n// //           console.log(\"Gọi onUpdateChat từ uploadFileToServer:\", friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //           onUpdateChat(friend.id, {\n// //             content: decodeURIComponent(file.name),\n// //             sender: friend.sender,\n// //             timestamp: new Date().toISOString(),\n// //             message_type: mediaType,\n// //           });\n// //         }\n\n// //         if (socketRef.current) {\n// //           socketRef.current.emit(\"updateMessage\", {\n// //             toUserId: friend.member,\n// //             message: {\n// //               id: messageId,\n// //               conversation_id: friend.id,\n// //               message_type: mediaType,\n// //               url: filePath,\n// //             },\n// //           });\n// //         }\n\n// //         try {\n// //           await axios.post(\"http://localhost:5000/api/chat/send-message/\", {\n// //             id: messageId,\n// //             conversationId: friend.id,\n// //             sender: friend.sender,\n// //             content: decodeURIComponent(file.name),\n// //             message_type: mediaType,\n// //             timestamp: new Date().toISOString(),\n// //             recipient: friend.member,\n// //             url: filePath,\n// //           });\n// //         } catch (messageError) {\n// //           console.error(\"Lỗi gửi tin nhắn:\", messageError);\n// //         }\n// //       }\n// //     } catch (uploadError) {\n// //       setMessages((prev) =>\n// //         prev.map((msg) => {\n// //           if (msg.id === messageId) {\n// //             return {\n// //               ...msg,\n// //               uploading: false,\n// //               error: true,\n// //               isTemporary: false,\n// //             };\n// //           }\n// //           return msg;\n// //         })\n// //       );\n// //       alert(\"Upload thất bại: \" + (uploadError.response?.data?.error || uploadError.message));\n// //     }\n// //   };\n\n// //   if (!friend) {\n// //     return (\n// //       <div className={cx(\"chat\")}>\n// //         <div className={cx(\"empty-state\")}>\n// //           <div className={cx(\"empty-content\")}>\n// //             <div className={cx(\"empty-icon\")}>\n// //               <svg width=\"80\" height=\"80\" viewBox=\"0 0 24 24\" fill=\"none\">\n// //                 <path\n// //                   d=\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z\"\n// //                   fill=\"currentColor\"\n// //                   opacity=\"0.3\"\n// //                 />\n// //                 <circle cx=\"8\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n// //                 <circle cx=\"12\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n// //                 <circle cx=\"16\" cy=\"12\" r=\"1\" fill=\"currentColor\" />\n// //               </svg>\n// //             </div>\n// //             <div className={cx(\"empty-text\")}>\n// //               <h2>Chọn một cuộc trò chuyện</h2>\n// //               <p>Chọn một người bạn từ danh sách bên trái để bắt đầu nhắn tin</p>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n\n// //   return (\n// //     <div className={cx(\"chat\")}>\n// //       <ChatHeader friend={friend} onAvatarClick={handleAvatarClick} onToggleDetail={onToggleDetail} />\n\n// //       {showSendRequestBar ? (\n// //         <FriendRequestBar friend={friend} onSendRequest={handleSendFriendRequest} isVisible={false} />\n// //       ) : (\n// //         <FriendRequestConfirmationBar\n// //           friend={friend}\n// //           onConfirmRequest={handleConfirmFriendRequest}\n// //           onRejectRequest={handleRejectFriendRequest}\n// //           isVisible={false}\n// //         />\n// //       )}\n\n// //       <div className={cx(\"center\")} ref={messagesContainerRef}>\n// //         {loading ? (\n// //           <div>Đang tải...</div>\n// //         ) : error ? (\n// //           <div className={cx(\"error\")}>{error}</div>\n// //         ) : (\n// //           <>\n// //             {isLoadingMore && (\n// //               <div className={cx(\"loading-more\")}>Đang tải thêm tin nhắn...</div>\n// //             )}\n// //             {messages.map((message, index) => {\n// //               const prevMsg = messages[index - 1];\n// //               const nextMsg = messages[index + 1];\n// //               const currentTime = message.timestamp;\n\n// //               let showSeparator = false;\n// //               let showTime = false;\n\n// //               if (!prevMsg) {\n// //                 showSeparator = true;\n// //               } else {\n// //                 const diffMinutes = (currentTime - prevMsg.timestamp) / 1000 / 60;\n// //                 if (diffMinutes >= 10) {\n// //                   showSeparator = true;\n// //                 }\n// //               }\n\n// //               if (!nextMsg) {\n// //                 showTime = true;\n// //               } else {\n// //                 const sameMinute =\n// //                   currentTime.getHours() === nextMsg.timestamp.getHours() &&\n// //                   currentTime.getMinutes() === nextMsg.timestamp.getMinutes();\n// //                 if (!sameMinute) {\n// //                   showTime = true;\n// //                 }\n// //               }\n\n// //               return (\n// //                 <div key={message.id} className={cx(\"message-wrapper\", message.type)}>\n// //                   {showSeparator && (\n// //                     <div className={cx(\"time-separator\")}>\n// //                       <div className={cx(\"time-separator-content\")}>\n// //                         {formatSeparator(message.timestamp)}\n// //                       </div>\n// //                     </div>\n// //                   )}\n// //                   <div className={cx(\"message\", message.type)}>\n// //                     <div\n// //                       className={cx(\"message-bubble\", {\n// //                         \"has-media\": message.temporaryImage || message.image || message.temporaryVideo || message.video || message.file,\n// //                         temporary: message.isTemporary,\n// //                         uploading: message.uploading,\n// //                       })}\n// //                     >\n// //                       {renderMessageContent(message)}\n// //                     </div>\n// //                     {showTime && (\n// //                       <div className={cx(\"message-time\")}>{formatTime(message.timestamp)}</div>\n// //                     )}\n// //                   </div>\n// //                 </div>\n// //               );\n// //             })}\n// //           </>\n// //         )}\n// //       </div>\n\n// //       <div className={cx(\"cr\")}>\n// //         <label className={cx(\"cr-button\")} title=\"Chọn ảnh\" aria-label=\"Chọn ảnh để gửi\">\n// //           <input\n// //             type=\"file\"\n// //             accept=\"image/*\"\n// //             style={{ display: \"none\" }}\n// //             onChange={(e) => handleMediaSelect(e, \"image\")}\n// //           />\n// //           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //             <path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\" />\n// //           </svg>\n// //         </label>\n// //         <label className={cx(\"cr-button\")} title=\"Chọn tệp\" aria-label=\"Chọn tệp để gửi\">\n// //           <input\n// //             type=\"file\"\n// //             accept=\".pdf,.doc,.docx,.txt,.zip,.rar,.xlsx,.xls,.ppt,.pptx\"\n// //             style={{ display: \"none\" }}\n// //             onChange={(e) => handleMediaSelect(e, \"file\")}\n// //           />\n// //           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //             <path d=\"M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z\" />\n// //           </svg>\n// //         </label>\n// //         <label className={cx(\"cr-button\")} title=\"Chọn video\" aria-label=\"Chọn video để gửi\">\n// //           <input\n// //             type=\"file\"\n// //             accept=\"video/*\"\n// //             style={{ display: \"none\" }}\n// //             onChange={(e) => handleMediaSelect(e, \"video\")}\n// //           />\n// //           <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //             <path d=\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z\" />\n// //           </svg>\n// //         </label>\n// //       </div>\n\n// //       <div className={cx(\"input-area\")}>\n// //         <input\n// //           type=\"text\"\n// //           placeholder=\"Nhập tin nhắn...\"\n// //           value={text}\n// //           onChange={(e) => setText(e.target.value)}\n// //           onKeyPress={handleKeyPress}\n// //           className={cx(\"message-input\")}\n// //           aria-label=\"Nhập tin nhắn\"\n// //         />\n// //         <div className={cx(\"emoji-container\")}>\n// //           <button\n// //             className={cx(\"emoji-button\")}\n// //             onClick={() => setOpen((prev) => !prev)}\n// //             aria-label=\"Mở bảng chọn biểu tượng cảm xúc\"\n// //           >\n// //             😊\n// //           </button>\n// //           <div className={cx(\"emoji-picker\")} style={{ display: open ? \"block\" : \"none\" }}>\n// //             {emojis.map((emoji, index) => (\n// //               <button\n// //                 key={index}\n// //                 onClick={() => handleEmoji(emoji)}\n// //                 className={cx(\"emoji-item\")}\n// //                 aria-label={`Chọn biểu tượng ${emoji}`}\n// //               >\n// //                 {emoji}\n// //               </button>\n// //             ))}\n// //           </div>\n// //         </div>\n// //         <button\n// //           onClick={handleSend}\n// //           className={cx(\"send-button\", { active: text.trim() })}\n// //           aria-label={text.trim() ? \"Gửi tin nhắn\" : \"Gửi like\"}\n// //         >\n// //           {text.trim() ? (\n// //             <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //               <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\n// //             </svg>\n// //           ) : (\n// //             <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n// //               <path d=\"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\" />\n// //             </svg>\n// //           )}\n// //         </button>\n// //       </div>\n\n// //       {open && <div className={cx(\"overlay\")} onClick={() => setOpen(false)} />}\n// //       {showProfile && <ProFile1 onClose={() => setShowProFile(false)} datax={friend} />}\n// //       {previewImage && <ChatPreview imageUrl={previewImage} onClose={handleClosePreview} />}\n// //     </div>\n// //   );\n// // }\n\n// // export default Chat;\n\n\n\n\n\n\n\n\nimport classNames from \"classnames/bind\";\nimport styles from \"./Chat.module.scss\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport ProFile1 from \"~/pages/ProFile1\";\nimport ChatPreview from \"./ChatPreview\";\nimport EmptyState from \"./EmptyState/EmptyState\";\nimport MediaUploadBar from \"./MediaUploadBar/MediaUploadBar\";\nimport MessageList from \"./MessageList/MessageList\";\nimport useSocketHandler from \"./SocketHandler/useSocketHander\";\nimport useMessagesHandler from \"./MessageHandler/useMessageHandler\";\nimport useChatActions from \"./ChatAction/useChatActions\";\nimport FriendRequestBar from \"./FriendRequestBar\";\nimport FriendRequestConfirmationBar from \"./FriendRequestConfirmationBar\";\nimport ChatInput from \"./ChatInput/ChatInput\";\nimport ChatHeader from \"./ChatHeader\";\n\n\nconst cx = classNames.bind(styles);\n\nfunction Chat({ friend, onToggleDetail, onUpdateChat }) {\n  const {\n    messages,\n    setMessages,\n    loading,\n    isLoadingMore,\n    hasMore,\n    error,\n    loadMoreMessages\n  } = useMessagesHandler(friend);\n\n\n  const { socketRef } = useSocketHandler(friend, onUpdateChat, setMessages);\n  const { handleSend, handleMediaSelect } = useChatActions(friend, onUpdateChat, setMessages, socketRef);\n\n  const [showProfile, setShowProFile] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [showSendRequestBar, setShowSendRequestBar] = useState(true);\n  \n\n  // Các hàm callback và logic khác giữ nguyên, chỉ sửa phần liên quan đến emoji\n  const handleAvatarClick = useCallback(() => {\n    setShowProFile(true);\n  }, []);\n\n  const handleSendFriendRequest = useCallback((friendId, friendName) => {\n    console.log(`Gửi lời mời kết bạn tới ID ${friendId}: ${friendName}`);\n  }, []);\n\n  const handleConfirmFriendRequest = useCallback((friendId, friendName) => {\n    console.log(`Xác nhận lời mời kết bạn từ ID ${friendId}: ${friendName}`);\n  }, []);\n\n  const handleRejectFriendRequest = useCallback((friendId, friendName) => {\n    console.log(`Từ chối lời mời kết bạn từ ID ${friendId}: ${friendName}`);\n  }, []);\n\n  const handleClosePreview = useCallback(() => {\n    setPreviewImage(null);\n  }, []);\n\n  const toggleRequestBar = useCallback(() => {\n    setShowSendRequestBar((prev) => !prev);\n  }, []);\n\n  \n  if (!friend) return <EmptyState />;\n\n\n  return (\n    <div className={cx(\"chat\")}>\n      <ChatHeader \n        friend={friend} \n        onAvatarClick={handleAvatarClick} \n        onToggleDetail={onToggleDetail} \n      />\n\n      {showSendRequestBar ? (\n        <FriendRequestBar \n          friend={friend} \n          onSendRequest={handleSendFriendRequest} \n          isVisible={false} \n        />\n      ) : (\n        <FriendRequestConfirmationBar\n          friend={friend}\n          onConfirmRequest={handleConfirmFriendRequest}\n          onRejectRequest={handleRejectFriendRequest}\n          isVisible={false}\n        />\n      )}\n      <MessageList\n        messages={messages}\n        loading={loading}\n        error={error}\n        isLoadingMore={isLoadingMore}\n        hasMore={hasMore}\n        onLoadMore={loadMoreMessages}\n        onImagePreview={setPreviewImage}\n      />\n      <MediaUploadBar onMediaSelect={handleMediaSelect} />\n      <ChatInput onSend={handleSend} />\n      {showProfile && <ProFile1 onClose={() => setShowProFile(false)} datax={friend} />}\n      {previewImage && <ChatPreview imageUrl={previewImage} onClose={handleClosePreview} />}\n    </div>\n  );\n}\n\nexport default Chat;\n\n\n\n\n"],"mappingsiBAAiB,CACxC,MAAO,CAAAC,MAAM,0BACb,OAASC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,CAAEC,WAAW,KAAQ,OAAO,CAChE,MAAO,CAAAC,QAAQ,4BACf,MAAO,CAAAC,WAAW,qBAClB,MAAO,CAAAC,UAAU,+BACjB,MAAO,CAAAC,cAAc,uCACrB,MAAO,CAAAC,WAAW,iCAClB,MAAO,CAAAC,gBAAgB,uCACvB,MAAO,CAAAC,kBAAkB,0CACzB,MAAO,CAAAC,cAAc,mCACrB,MAAO,CAAAC,gBAAgB,0BACvB,MAAO,CAAAC,4BAA4B,sCACnC,MAAO,CAAAC,SAAS,6BAChB,MAAO,CAAAC,UAAU,oBAAqB,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAGtC,KAAM,CAAAC,EAAE,CAAGtB,UAAU,CAACuB,IAAI,CAACtB,MAAM,CAAC,CAElC,QAAS,CAAAuB,IAAIA,CAAAC,IAAA,CAA2C,IAA1C,CAAEC,MAAM,CAAEC,cAAc,CAAEC,YAAa,CAAC,CAAAH,IAAA,CACpD,KAAM,CACJI,QAAQ,CACRC,WAAW,CACXC,OAAO,CACPC,aAAa,CACbC,OAAO,CACPC,KAAK,CACLC,gBACF,CAAC,CAAGvB,kBAAkB,CAACc,MAAM,CAAC,CAG9B,KAAM,CAAEU,SAAU,CAAC,CAAGzB,gBAAgB,CAACe,MAAM,CAAEE,YAAY,CAAEE,WAAW,CAAC,CACzE,KAAM,CAAEO,UAAU,CAAEC,iBAAkB,CAAC,CAAGzB,cAAc,CAACa,MAAM,CAAEE,YAAY,CAAEE,WAAW,CAAEM,SAAS,CAAC,CAEtG,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGtC,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACuC,YAAY,CAAEC,eAAe,CAAC,CAAGxC,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACyC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAG1C,QAAQ,CAAC,IAAI,CAAC,CAGlE;AACA,KAAM,CAAA2C,iBAAiB,CAAGxC,WAAW,CAAC,IAAM,CAC1CmC,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,uBAAuB,CAAGzC,WAAW,CAAC,CAAC0C,QAAQ,CAAEC,UAAU,GAAK,CACpEC,OAAO,CAACC,GAAG,6DAAAC,MAAA,CAA+BJ,QAAQ,OAAAI,MAAA,CAAKH,UAAU,CAAE,CAAC,CACtE,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAI,0BAA0B,CAAG/C,WAAW,CAAC,CAAC0C,QAAQ,CAAEC,UAAU,GAAK,CACvEC,OAAO,CAACC,GAAG,oEAAAC,MAAA,CAAmCJ,QAAQ,OAAAI,MAAA,CAAKH,UAAU,CAAE,CAAC,CAC1E,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAK,yBAAyB,CAAGhD,WAAW,CAAC,CAAC0C,QAAQ,CAAEC,UAAU,GAAK,CACtEC,OAAO,CAACC,GAAG,qEAAAC,MAAA,CAAkCJ,QAAQ,OAAAI,MAAA,CAAKH,UAAU,CAAE,CAAC,CACzE,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,kBAAkB,CAAGjD,WAAW,CAAC,IAAM,CAC3CqC,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAa,gBAAgB,CAAGlD,WAAW,CAAC,IAAM,CACzCuC,qBAAqB,CAAEY,IAAI,EAAK,CAACA,IAAI,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAGN,GAAI,CAAC9B,MAAM,CAAE,mBAAOP,IAAA,CAACX,UAAU,GAAE,CAAC,CAGlC,mBACEa,KAAA,QAAKoC,SAAS,CAAEnC,EAAE,CAAC,MAAM,CAAE,CAAAoC,QAAA,eACzBvC,IAAA,CAACF,UAAU,EACTS,MAAM,CAAEA,MAAO,CACfiC,aAAa,CAAEd,iBAAkB,CACjClB,cAAc,CAAEA,cAAe,CAChC,CAAC,CAEDgB,kBAAkB,cACjBxB,IAAA,CAACL,gBAAgB,EACfY,MAAM,CAAEA,MAAO,CACfkC,aAAa,CAAEd,uBAAwB,CACvCe,SAAS,CAAE,KAAM,CAClB,CAAC,cAEF1C,IAAA,CAACJ,4BAA4B,EAC3BW,MAAM,CAAEA,MAAO,CACfoC,gBAAgB,CAAEV,0BAA2B,CAC7CW,eAAe,CAAEV,yBAA0B,CAC3CQ,SAAS,CAAE,KAAM,CAClB,CACF,cACD1C,IAAA,CAACT,WAAW,EACVmB,QAAQ,CAAEA,QAAS,CACnBE,OAAO,CAAEA,OAAQ,CACjBG,KAAK,CAAEA,KAAM,CACbF,aAAa,CAAEA,aAAc,CAC7BC,OAAO,CAAEA,OAAQ,CACjB+B,UAAU,CAAE7B,gBAAiB,CAC7B8B,cAAc,CAAEvB,eAAgB,CACjC,CAAC,cACFvB,IAAA,CAACV,cAAc,EAACyD,aAAa,CAAE5B,iBAAkB,CAAE,CAAC,cACpDnB,IAAA,CAACH,SAAS,EAACmD,MAAM,CAAE9B,UAAW,CAAE,CAAC,CAChCE,WAAW,eAAIpB,IAAA,CAACb,QAAQ,EAAC8D,OAAO,CAAEA,CAAA,GAAM5B,cAAc,CAAC,KAAK,CAAE,CAAC6B,KAAK,CAAE3C,MAAO,CAAE,CAAC,CAChFe,YAAY,eAAItB,IAAA,CAACZ,WAAW,EAAC+D,QAAQ,CAAE7B,YAAa,CAAC2B,OAAO,CAAEd,kBAAmB,CAAE,CAAC,EAClF,CAAC,CAEV,CAEA,cAAe,CAAA9B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
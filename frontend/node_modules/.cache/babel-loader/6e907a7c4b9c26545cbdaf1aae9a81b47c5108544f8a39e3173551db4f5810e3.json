{"ast":null,"code":"import _objectSpread from\"/home/ichigomazone/Vscode/ReactJs/new-ui/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState,useRef}from'react';import classNames from'classnames/bind';import styles from\"./chatList.module.scss\";import{Pin,Users,File,Image,Video}from'lucide-react';import axios from'axios';import{io}from'socket.io-client';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const cx=classNames.bind(styles);function ChatList(_ref){let{onSelectFriend,chatData1,setUpdateChatList}=_ref;const[userChats,setUserChats]=useState([]);const[leakInfoMap,setLeakInfoMap]=useState({});const[selectedChatId,setSelectedChatId]=useState(null);const[currentTime,setCurrentTime]=useState(new Date());const socketRef=useRef(null);// Lấy danh sách chat\nuseEffect(()=>{if(!chatData1)return;const fetchChats=async()=>{try{const res=await axios.post('http://localhost:5000/api/chat/chat-list',{userId:chatData1});if(res.status===200){setUserChats(res.data.chats);console.log('[ChatList] Danh sách chat:',res.data);}}catch(err){console.error('[ChatList] Lỗi khi lấy danh sách chat:',err);}};fetchChats();},[chatData1]);// Lấy thông tin người dùng\nuseEffect(()=>{const fetchAll=async()=>{try{const userIdsToFetch=userChats.map(chat=>chat.members.find(member=>member!==chatData1));const uniqueUserIds=[...new Set(userIdsToFetch)].filter(userId=>!(userId in leakInfoMap));if(uniqueUserIds.length===0)return;const promises=uniqueUserIds.map(userId=>axios.post('http://localhost:5000/api/auth/leak-info1',{data:userId}));const results=await Promise.all(promises);const newLeakInfoMap=_objectSpread({},leakInfoMap);results.forEach((res,index)=>{const userId=uniqueUserIds[index];newLeakInfoMap[userId]=res.data;});setLeakInfoMap(newLeakInfoMap);console.log('[ChatList] Thông tin người dùng (map):',newLeakInfoMap);}catch(err){console.log('[ChatList] Lỗi khi lấy thông tin người dùng:',err);}};if(userChats.length>0&&Object.keys(leakInfoMap).length<userChats.length){fetchAll();}},[userChats,chatData1,leakInfoMap]);// Xử lý WebSocket để lắng nghe tin nhắn\nuseEffect(()=>{if(!chatData1)return;socketRef.current=io(\"http://localhost:5000\",{query:{userId:chatData1}});// Lắng nghe tin nhắn từ người khác (receiveMessage hoặc privateMessage)\nsocketRef.current.on(\"receiveMessage\",data=>{console.log(\"📩 Nhận receiveMessage trong ChatList:\",data);if(data.message&&data.message.conversation_id){updateChatInList(data.message.conversation_id,{content:data.message.content,sender:data.message.sender,timestamp:data.message.timestamp,message_type:data.message.message_type,url:data.message.url||null});}else{console.warn('[ChatList] Dữ liệu receiveMessage không hợp lệ:',data);}});socketRef.current.on(\"privateMessage\",data=>{console.log(\"📩 Nhận privateMessage trong ChatList:\",data);if(data.message&&data.message.conversation_id){updateChatInList(data.message.conversation_id,{content:data.message.content,sender:data.message.sender,timestamp:data.message.timestamp,message_type:data.message.message_type,url:data.message.url||null});}else{console.warn('[ChatList] Dữ liệu privateMessage không hợp lệ:',data);}});// Lắng nghe tin nhắn do chính mình gửi (selfMessage)\nsocketRef.current.on(\"selfMessage\",data=>{console.log(\"📩 Tin nhắn do tôi gửi trong ChatList:\",data);if(data.message&&data.message.conversation_id){updateChatInList(data.message.conversation_id,{content:data.message.content,sender:data.message.sender,timestamp:data.message.timestamp,message_type:data.message.message_type,url:data.message.url||null});}else{console.warn('[ChatList] Dữ liệu selfMessage không hợp lệ:',data);}});// Lắng nghe cập nhật tin nhắn media (updateMessage)\nsocketRef.current.on(\"updateMessage\",data=>{console.log(\"📩 Nhận updateMessage trong ChatList:\",data);if(data.message&&data.message.conversation_id){updateChatInList(data.message.conversation_id,{content:data.message.content||data.message.message_type,sender:data.message.sender||chatData1,timestamp:data.message.timestamp||new Date().toISOString(),message_type:data.message.message_type,url:data.message.url||null});}else{console.warn('[ChatList] Dữ liệu updateMessage không hợp lệ:',data);}});return()=>{if(socketRef.current){socketRef.current.disconnect();}};},[chatData1]);// Hàm cập nhật chat khi có tin nhắn mới\nconst updateChatInList=(chatId,messageData)=>{console.log('[ChatList] updateChatInList được gọi với:',{chatId,messageData});setUserChats(prevChats=>{const chatExists=prevChats.find(chat=>chat.id===chatId||chat._id===chatId);if(!chatExists){console.warn('[ChatList] ChatId không tồn tại:',chatId);return prevChats;}const updatedChats=prevChats.map(chat=>chat.id===chatId||chat._id===chatId?_objectSpread(_objectSpread({},chat),{},{last_message:{content:messageData.message_type==='text'?messageData.content:messageData.url?decodeURIComponent(messageData.content):messageData.message_type,sender:messageData.sender,timestamp:messageData.timestamp,message_type:messageData.message_type,url:messageData.url}}):chat);// Sắp xếp theo timestamp của last_message\nconst sortedChats=[...updatedChats].sort((a,b)=>{var _a$last_message,_b$last_message;const timeA=new Date(((_a$last_message=a.last_message)===null||_a$last_message===void 0?void 0:_a$last_message.timestamp)||0).getTime();const timeB=new Date(((_b$last_message=b.last_message)===null||_b$last_message===void 0?void 0:_b$last_message.timestamp)||0).getTime();return timeB-timeA;});console.log('[ChatList] Cập nhật userChats (sorted):',sortedChats);return sortedChats;});};// Đăng ký hàm updateChatInList với Dashboard\nuseEffect(()=>{if(setUpdateChatList&&typeof setUpdateChatList==='function'){console.log('[ChatList] Đăng ký updateChatInList với Dashboard');setUpdateChatList(updateChatInList);}else{console.warn('[ChatList] setUpdateChatList không phải là hàm hoặc không được truyền:',setUpdateChatList);}},[setUpdateChatList]);// Cập nhật thời gian real-time\nuseEffect(()=>{const interval=setInterval(()=>{setCurrentTime(new Date());},60000);return()=>clearInterval(interval);},[]);// Xử lý khi chọn một friend\nconst handleSelectFriend=chat=>{setSelectedChatId(chat.id);onSelectFriend(chat);console.log('[ChatList] Đã chọn chat:',{chatId:chat.id,name:chat.name});};// Logic xử lý dữ liệu chat\nconst chatData=userChats.map(chat=>{var _chat$last_message,_chat$last_message2,_chat$last_message3,_chat$last_message6;const otherUserId=chat.members.find(member=>member!==chatData1);const userInfo=leakInfoMap[otherUserId]||{};const timel=(_chat$last_message=chat.last_message)===null||_chat$last_message===void 0?void 0:_chat$last_message.timestamp;const dateToCheck=new Date(timel);const now=currentTime;const diffMs=now-dateToCheck;let tx='';if(diffMs<=0||isNaN(diffMs))tx='Vài giây';else{const diffSeconds=Math.floor(diffMs/1000);const diffMinutes=Math.floor(diffSeconds/60);const diffHours=Math.floor(diffMinutes/60);const diffDays=Math.floor(diffHours/24);if(diffDays>7){const day=dateToCheck.getDate();const month=dateToCheck.getMonth()+1;tx=\"\".concat(day,\"/\").concat(month);}else if(diffDays>0)tx=\"\".concat(diffDays,\" ng\\xE0y\");else if(diffHours>0)tx=\"\".concat(diffHours,\" gi\\u1EDD\");else if(diffMinutes>0)tx=\"\".concat(diffMinutes,\" ph\\xFAt\");else tx='Vài giây';}let msg='';const messageType=(_chat$last_message2=chat.last_message)===null||_chat$last_message2===void 0?void 0:_chat$last_message2.message_type;const prefix=((_chat$last_message3=chat.last_message)===null||_chat$last_message3===void 0?void 0:_chat$last_message3.sender)!==chatData1?'':'Bạn: ';if(messageType==='text'){var _chat$last_message4;msg=prefix+(((_chat$last_message4=chat.last_message)===null||_chat$last_message4===void 0?void 0:_chat$last_message4.content)||'');}else if(messageType==='image'){msg=prefix+'Hình ảnh';}else if(messageType==='video'){msg=prefix+'Video';}else if(messageType==='file'){msg=prefix+'Tệp';}else{var _chat$last_message5;msg=prefix+(((_chat$last_message5=chat.last_message)===null||_chat$last_message5===void 0?void 0:_chat$last_message5.content)||'');}return{id:chat._id,avatar:userInfo.avatar||'/default-avatar.png',name:userInfo.fullname||'Đang tải...',message:msg,time:tx,unreadCount:0,member:chat.members[0]===chatData1?chat.members[1]:chat.members[0],gender:userInfo.gender,sender:chatData1,messageType:messageType,timestamp:(_chat$last_message6=chat.last_message)===null||_chat$last_message6===void 0?void 0:_chat$last_message6.timestamp};}).sort((a,b)=>{const timeA=new Date(a.timestamp||0).getTime();const timeB=new Date(b.timestamp||0).getTime();return timeB-timeA;});const renderGroupMembers=chat=>{if(!chat.isGroup)return null;return/*#__PURE__*/_jsxs(\"div\",{className:cx('group-info'),children:[/*#__PURE__*/_jsx(Users,{className:cx('group-icon')}),chat.groupMembers&&/*#__PURE__*/_jsx(\"div\",{className:cx('member-avatars'),children:chat.groupMembers.slice(0,2).map((member,index)=>/*#__PURE__*/_jsx(\"div\",{className:cx('member-avatar'),children:/*#__PURE__*/_jsx(\"img\",{src:member,alt:\"\"})},index))}),chat.memberCount&&/*#__PURE__*/_jsx(\"span\",{className:cx('member-count'),children:chat.memberCount})]});};return/*#__PURE__*/_jsx(\"div\",{className:cx('chatList'),children:/*#__PURE__*/_jsx(\"div\",{className:cx('chat-container'),children:chatData.map(chat=>/*#__PURE__*/_jsxs(\"div\",{className:cx('chat-item',{'selected':chat.id===selectedChatId}),onClick:()=>handleSelectFriend(chat),role:\"button\",tabIndex:0,onKeyDown:e=>{if(e.key==='Enter'||e.key===' '){handleSelectFriend(chat);}},children:[/*#__PURE__*/_jsxs(\"div\",{className:cx('avatar-section'),children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://ichigomazone.s3.amazonaws.com/\".concat(chat.avatar),alt:chat.name,className:cx('avatar')}),chat.isOfficial&&/*#__PURE__*/_jsx(\"div\",{className:cx('official-badge'),children:/*#__PURE__*/_jsx(\"span\",{children:\"Z\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:cx('content'),children:[/*#__PURE__*/_jsxs(\"div\",{className:cx('header'),children:[/*#__PURE__*/_jsxs(\"div\",{className:cx('title-section'),children:[chat.isGroup&&renderGroupMembers(chat),/*#__PURE__*/_jsx(\"h3\",{className:cx('name'),children:chat.name})]}),/*#__PURE__*/_jsxs(\"div\",{className:cx('meta'),children:[chat.isPinned&&/*#__PURE__*/_jsx(Pin,{className:cx('pin-icon')}),/*#__PURE__*/_jsx(\"span\",{className:cx('time'),children:chat.time})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:cx('message-section'),children:[/*#__PURE__*/_jsxs(\"div\",{className:cx('message-wrapper'),children:[chat.messageType==='image'&&/*#__PURE__*/_jsx(Image,{className:cx('message-icon'),size:16}),chat.messageType==='video'&&/*#__PURE__*/_jsx(Video,{className:cx('message-icon'),size:16}),chat.messageType==='file'&&/*#__PURE__*/_jsx(File,{className:cx('message-icon'),size:16}),/*#__PURE__*/_jsx(\"p\",{className:cx('message','custom-font'),children:chat.message})]}),chat.unreadCount>0&&/*#__PURE__*/_jsx(\"div\",{className:cx('unread-badge'),children:chat.unreadCount>99?'99+':chat.unreadCount})]})]})]},chat.id))})});}export default ChatList;","map":{"version":3,"names":["React","useEffect","useState","useRef","classNames","styles","Pin","Users","File","Image","Video","axios","io","jsx","_jsx","jsxs","_jsxs","cx","bind","ChatList","_ref","onSelectFriend","chatData1","setUpdateChatList","userChats","setUserChats","leakInfoMap","setLeakInfoMap","selectedChatId","setSelectedChatId","currentTime","setCurrentTime","Date","socketRef","fetchChats","res","post","userId","status","data","chats","console","log","err","error","fetchAll","userIdsToFetch","map","chat","members","find","member","uniqueUserIds","Set","filter","length","promises","results","Promise","all","newLeakInfoMap","_objectSpread","forEach","index","Object","keys","current","query","on","message","conversation_id","updateChatInList","content","sender","timestamp","message_type","url","warn","toISOString","disconnect","chatId","messageData","prevChats","chatExists","id","_id","updatedChats","last_message","decodeURIComponent","sortedChats","sort","a","b","_a$last_message","_b$last_message","timeA","getTime","timeB","interval","setInterval","clearInterval","handleSelectFriend","name","chatData","_chat$last_message","_chat$last_message2","_chat$last_message3","_chat$last_message6","otherUserId","userInfo","timel","dateToCheck","now","diffMs","tx","isNaN","diffSeconds","Math","floor","diffMinutes","diffHours","diffDays","day","getDate","month","getMonth","concat","msg","messageType","prefix","_chat$last_message4","_chat$last_message5","avatar","fullname","time","unreadCount","gender","renderGroupMembers","isGroup","className","children","groupMembers","slice","src","alt","memberCount","onClick","role","tabIndex","onKeyDown","e","key","isOfficial","isPinned","size"],"sources":["/home/ichigomazone/Vscode/ReactJs/new-ui/frontend/src/components/List/chatList/index.js"],"sourcesContent":["\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './chatList.module.scss';\nimport { Pin, Users, File, Image, Video } from 'lucide-react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\n\nconst cx = classNames.bind(styles);\n\nfunction ChatList({ onSelectFriend, chatData1, setUpdateChatList }) {\n  const [userChats, setUserChats] = useState([]);\n  const [leakInfoMap, setLeakInfoMap] = useState({});\n  const [selectedChatId, setSelectedChatId] = useState(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const socketRef = useRef(null);\n\n  // Lấy danh sách chat\n  useEffect(() => {\n    if (!chatData1) return;\n\n    const fetchChats = async () => {\n      try {\n        const res = await axios.post('http://localhost:5000/api/chat/chat-list', { userId: chatData1 });\n        if (res.status === 200) {\n          setUserChats(res.data.chats);\n          console.log('[ChatList] Danh sách chat:', res.data);\n        }\n      } catch (err) {\n        console.error('[ChatList] Lỗi khi lấy danh sách chat:', err);\n      }\n    };\n\n    fetchChats();\n  }, [chatData1]);\n\n  // Lấy thông tin người dùng\n  useEffect(() => {\n    const fetchAll = async () => {\n      try {\n        const userIdsToFetch = userChats.map((chat) =>\n          chat.members.find((member) => member !== chatData1)\n        );\n\n        const uniqueUserIds = [...new Set(userIdsToFetch)].filter(userId => !(userId in leakInfoMap));\n\n        if (uniqueUserIds.length === 0) return;\n\n        const promises = uniqueUserIds.map((userId) =>\n          axios.post('http://localhost:5000/api/auth/leak-info1', { data: userId })\n        );\n\n        const results = await Promise.all(promises);\n\n        const newLeakInfoMap = { ...leakInfoMap };\n        results.forEach((res, index) => {\n          const userId = uniqueUserIds[index];\n          newLeakInfoMap[userId] = res.data;\n        });\n\n        setLeakInfoMap(newLeakInfoMap);\n        console.log('[ChatList] Thông tin người dùng (map):', newLeakInfoMap);\n      } catch (err) {\n        console.log('[ChatList] Lỗi khi lấy thông tin người dùng:', err);\n      }\n    };\n\n    if (userChats.length > 0 && Object.keys(leakInfoMap).length < userChats.length) {\n      fetchAll();\n    }\n  }, [userChats, chatData1, leakInfoMap]);\n\n  // Xử lý WebSocket để lắng nghe tin nhắn\n  useEffect(() => {\n    if (!chatData1) return;\n\n    socketRef.current = io(\"http://localhost:5000\", {\n      query: { userId: chatData1 },\n    });\n\n    // Lắng nghe tin nhắn từ người khác (receiveMessage hoặc privateMessage)\n    socketRef.current.on(\"receiveMessage\", (data) => {\n      console.log(\"📩 Nhận receiveMessage trong ChatList:\", data);\n      if (data.message && data.message.conversation_id) {\n        updateChatInList(data.message.conversation_id, {\n          content: data.message.content,\n          sender: data.message.sender,\n          timestamp: data.message.timestamp,\n          message_type: data.message.message_type,\n          url: data.message.url || null,\n        });\n      } else {\n        console.warn('[ChatList] Dữ liệu receiveMessage không hợp lệ:', data);\n      }\n    });\n\n    socketRef.current.on(\"privateMessage\", (data) => {\n      console.log(\"📩 Nhận privateMessage trong ChatList:\", data);\n      if (data.message && data.message.conversation_id) {\n        updateChatInList(data.message.conversation_id, {\n          content: data.message.content,\n          sender: data.message.sender,\n          timestamp: data.message.timestamp,\n          message_type: data.message.message_type,\n          url: data.message.url || null,\n        });\n      } else {\n        console.warn('[ChatList] Dữ liệu privateMessage không hợp lệ:', data);\n      }\n    });\n\n    // Lắng nghe tin nhắn do chính mình gửi (selfMessage)\n    socketRef.current.on(\"selfMessage\", (data) => {\n      console.log(\"📩 Tin nhắn do tôi gửi trong ChatList:\", data);\n      if (data.message && data.message.conversation_id) {\n        updateChatInList(data.message.conversation_id, {\n          content: data.message.content,\n          sender: data.message.sender,\n          timestamp: data.message.timestamp,\n          message_type: data.message.message_type,\n          url: data.message.url || null,\n        });\n      } else {\n        console.warn('[ChatList] Dữ liệu selfMessage không hợp lệ:', data);\n      }\n    });\n\n    // Lắng nghe cập nhật tin nhắn media (updateMessage)\n    socketRef.current.on(\"updateMessage\", (data) => {\n      console.log(\"📩 Nhận updateMessage trong ChatList:\", data);\n      if (data.message && data.message.conversation_id) {\n        updateChatInList(data.message.conversation_id, {\n          content: data.message.content || data.message.message_type,\n          sender: data.message.sender || chatData1,\n          timestamp: data.message.timestamp || new Date().toISOString(),\n          message_type: data.message.message_type,\n          url: data.message.url || null,\n        });\n      } else {\n        console.warn('[ChatList] Dữ liệu updateMessage không hợp lệ:', data);\n      }\n    });\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [chatData1]);\n\n  // Hàm cập nhật chat khi có tin nhắn mới\n  const updateChatInList = (chatId, messageData) => {\n    console.log('[ChatList] updateChatInList được gọi với:', { chatId, messageData });\n    setUserChats((prevChats) => {\n      const chatExists = prevChats.find((chat) => chat.id === chatId || chat._id === chatId);\n      if (!chatExists) {\n        console.warn('[ChatList] ChatId không tồn tại:', chatId);\n        return prevChats;\n      }\n\n      const updatedChats = prevChats.map((chat) =>\n        chat.id === chatId || chat._id === chatId\n          ? {\n              ...chat,\n              last_message: {\n                content:\n                  messageData.message_type === 'text'\n                    ? messageData.content\n                    : messageData.url\n                    ? decodeURIComponent(messageData.content)\n                    : messageData.message_type,\n                sender: messageData.sender,\n                timestamp: messageData.timestamp,\n                message_type: messageData.message_type,\n                url: messageData.url,\n              },\n            }\n          : chat\n      );\n\n      // Sắp xếp theo timestamp của last_message\n      const sortedChats = [...updatedChats].sort((a, b) => {\n        const timeA = new Date(a.last_message?.timestamp || 0).getTime();\n        const timeB = new Date(b.last_message?.timestamp || 0).getTime();\n        return timeB - timeA;\n      });\n\n      console.log('[ChatList] Cập nhật userChats (sorted):', sortedChats);\n      return sortedChats;\n    });\n  };\n\n  // Đăng ký hàm updateChatInList với Dashboard\n  useEffect(() => {\n    if (setUpdateChatList && typeof setUpdateChatList === 'function') {\n      console.log('[ChatList] Đăng ký updateChatInList với Dashboard');\n      setUpdateChatList(updateChatInList);\n    } else {\n      console.warn('[ChatList] setUpdateChatList không phải là hàm hoặc không được truyền:', setUpdateChatList);\n    }\n  }, [setUpdateChatList]);\n\n  // Cập nhật thời gian real-time\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Xử lý khi chọn một friend\n  const handleSelectFriend = (chat) => {\n    setSelectedChatId(chat.id);\n    onSelectFriend(chat);\n    console.log('[ChatList] Đã chọn chat:', { chatId: chat.id, name: chat.name });\n  };\n\n  // Logic xử lý dữ liệu chat\n  const chatData = userChats.map((chat) => {\n    const otherUserId = chat.members.find((member) => member !== chatData1);\n    const userInfo = leakInfoMap[otherUserId] || {};\n\n    const timel = chat.last_message?.timestamp;\n    const dateToCheck = new Date(timel);\n    const now = currentTime;\n    const diffMs = now - dateToCheck;\n\n    let tx = '';\n    if (diffMs <= 0 || isNaN(diffMs)) tx = 'Vài giây';\n    else {\n      const diffSeconds = Math.floor(diffMs / 1000);\n      const diffMinutes = Math.floor(diffSeconds / 60);\n      const diffHours = Math.floor(diffMinutes / 60);\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffDays > 7) {\n        const day = dateToCheck.getDate();\n        const month = dateToCheck.getMonth() + 1;\n        tx = `${day}/${month}`;\n      } else if (diffDays > 0) tx = `${diffDays} ngày`;\n      else if (diffHours > 0) tx = `${diffHours} giờ`;\n      else if (diffMinutes > 0) tx = `${diffMinutes} phút`;\n      else tx = 'Vài giây';\n    }\n\n    let msg = '';\n    const messageType = chat.last_message?.message_type;\n    const prefix = chat.last_message?.sender !== chatData1 ? '' : 'Bạn: ';\n\n    if (messageType === 'text') {\n      msg = prefix + (chat.last_message?.content || '');\n    } else if (messageType === 'image') {\n      msg = prefix + 'Hình ảnh';\n    } else if (messageType === 'video') {\n      msg = prefix + 'Video';\n    } else if (messageType === 'file') {\n      msg = prefix + 'Tệp';\n    } else {\n      msg = prefix + (chat.last_message?.content || '');\n    }\n\n    return {\n      id: chat._id,\n      avatar: userInfo.avatar || '/default-avatar.png',\n      name: userInfo.fullname || 'Đang tải...',\n      message: msg,\n      time: tx,\n      unreadCount: 0,\n      member: chat.members[0] === chatData1 ? chat.members[1] : chat.members[0],\n      gender: userInfo.gender,\n      sender: chatData1,\n      messageType: messageType,\n      timestamp: chat.last_message?.timestamp,\n    };\n  }).sort((a, b) => {\n    const timeA = new Date(a.timestamp || 0).getTime();\n    const timeB = new Date(b.timestamp || 0).getTime();\n    return timeB - timeA;\n  });\n\n  const renderGroupMembers = (chat) => {\n    if (!chat.isGroup) return null;\n\n    return (\n      <div className={cx('group-info')}>\n        <Users className={cx('group-icon')} />\n        {chat.groupMembers && (\n          <div className={cx('member-avatars')}>\n            {chat.groupMembers.slice(0, 2).map((member, index) => (\n              <div key={index} className={cx('member-avatar')}>\n                <img src={member} alt=\"\" />\n              </div>\n            ))}\n          </div>\n        )}\n        {chat.memberCount && <span className={cx('member-count')}>{chat.memberCount}</span>}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cx('chatList')}>\n      <div className={cx('chat-container')}>\n        {chatData.map((chat) => (\n          <div\n            key={chat.id}\n            className={cx('chat-item', { 'selected': chat.id === selectedChatId })}\n            onClick={() => handleSelectFriend(chat)}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                handleSelectFriend(chat);\n              }\n            }}\n          >\n            <div className={cx('avatar-section')}>\n              <img \n                src={`https://ichigomazone.s3.amazonaws.com/${chat.avatar}`} \n                alt={chat.name} \n                className={cx('avatar')} \n              />\n              {chat.isOfficial && (\n                <div className={cx('official-badge')}>\n                  <span>Z</span>\n                </div>\n              )}\n            </div>\n            <div className={cx('content')}>\n              <div className={cx('header')}>\n                <div className={cx('title-section')}>\n                  {chat.isGroup && renderGroupMembers(chat)}\n                  <h3 className={cx('name')}>{chat.name}</h3>\n                </div>\n                <div className={cx('meta')}>\n                  {chat.isPinned && <Pin className={cx('pin-icon')} />}\n                  <span className={cx('time')}>{chat.time}</span>\n                </div>\n              </div>\n              <div className={cx('message-section')}>\n                <div className={cx('message-wrapper')}>\n                  {chat.messageType === 'image' && <Image className={cx('message-icon')} size={16} />}\n                  {chat.messageType === 'video' && <Video className={cx('message-icon')} size={16} />}\n                  {chat.messageType === 'file' && <File className={cx('message-icon')} size={16} />}\n                  <p className={cx('message', 'custom-font')}>{chat.message}</p>\n                </div>\n                {chat.unreadCount > 0 && (\n                  <div className={cx('unread-badge')}>\n                    {chat.unreadCount > 99 ? '99+' : chat.unreadCount}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChatList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}